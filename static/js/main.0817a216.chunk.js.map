{"version":3,"sources":["Component/Table/ModalForAssets/ModalForAssets.tsx","Bll/Portfolio-reducer.ts","Component/Table/Asset/Assets.tsx","Bll/App-reducer.ts","Dal/Api.ts","Bll/Crypt-coin-list-reducer.ts","Component/Common/Preloader/Preloader.tsx","Component/Common/Paginator/Paginator.tsx","Component/Common/AlertError/AlertError.tsx","Component/Table/Table.tsx","Component/Header/Header.tsx","Component/Portfolio/Wallet/Wallet.tsx","Component/Portfolio/Portfolio.tsx","Component/Common/Chart/Chart.tsx","Component/Table/CurrencyInfo/CurrencyInfo.tsx","App.tsx","reportWebVitals.js","Store/Store.ts","Component/Common/Utils/localstorage-utils.ts","index.tsx"],"names":["ModalForAssets","props","useState","assetsCount","setAssetsCount","currentValueAsset","Number","assets","priceUsd","toFixed","Modal","show","Header","Title","Button","onClick","showModal","variant","Body","name","InputGroup","className","FormControl","type","value","onChange","e","currentTarget","Text","Footer","addAssetsHandler","initialState","portfolio","percent","currentAssetSessions","currentPage","Assets","React","memo","item","setShowModal","dispatch","useDispatch","history","useHistory","newAccount","assetId","id","count","price","asset","rank","push","status","error","setAppStatus","createInstance","axios","create","baseURL","api","get","params","interval","dataAssets","timestamp","chartData","topAssets","setDataAssets","data","setDataChart","setTopDataAssets","Preloader","Spinner","animation","Paginator","pageCount","Math","ceil","totalCount","pageSize","pages","i","map","page","onPageChange","AlertError","setShow","Alert","Heading","Table","useEffect","a","response","useSelector","state","cryptocurrencyList","app","pageCurrent","length","lastCurrentsPage","firstCurrentPage","currentElements","slice","changePage","portfolioAmount","reduce","acc","curr","Infinity","to","Wallet","currentAssets","countDelete","setCountDelete","changeAsset","setChangeAsset","valueAssets","find","assetValue","assetRemove","updateCurrAssetPercent","removeAssetPortfolio","removeAssetHandler","Portfolio","checkingCurrentAsset","filter","goBack","Charts","options","series","highcharts","Highcharts","CurrencyInfo","useParams","getChartDataTC","scope","marketCapUsd","vwap24Hr","supply","volumeUsd24Hr","changePercent24Hr","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","currentAssetSession","forEach","element","store","createStore","serializedState","localStorage","getItem","parsedState","JSON","parse","checkingArrayAssets","err","loadState","applyMiddleware","ThunkMiddleware","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0817a216.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, FormControl, InputGroup, Modal } from 'react-bootstrap';\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\n\r\ntype ModalForAssetsType = {\r\n    assets: CryptocurrencyListType\r\n    showModal: (show: boolean) => void\r\n    addAssetsHandler: (countAssets: number) => void\r\n}\r\nexport const ModalForAssets = (props: ModalForAssetsType) => {\r\n    const [assetsCount, setAssetsCount] = useState<string>('')\r\n    const onChangeAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (Number(e.currentTarget.value) > -1) {\r\n            setAssetsCount(e.currentTarget.value)\r\n        }\r\n    }\r\n    const onAddAssetsHandler = () => +assetsCount !== 0 && props.addAssetsHandler(Number(assetsCount))\r\n    const currentValueAsset = (Number(props.assets.priceUsd) * Number(assetsCount)).toFixed(2)\r\n    return (<Modal show={true}>\r\n            <Modal.Header>\r\n                <Modal.Title>Add to portfolio</Modal.Title>\r\n                <Button onClick={() => props.showModal(false)} variant=\"primary\">close</Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    Do you want to add <strong>{props.assets.name}</strong> to your portfolio\r\n                </div>\r\n                <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl type=\"number\" value={assetsCount} onChange={onChangeAssets}/>\r\n                        <InputGroup.Text>${currentValueAsset}</InputGroup.Text>\r\n                    </InputGroup>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={onAddAssetsHandler} variant=\"primary\">\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n","import { AddAssetType } from '../Dal/Types';\r\nimport { ActionsTypes } from '../Store/Store';\r\n\r\n\r\nconst initialState = {\r\n    portfolio: [] as AddAssetType[],\r\n    percent: 0,\r\n    currentAssetSessions: 0,\r\n    currentPage:1\r\n}\r\n\r\nexport const portfolioReducer = (state = initialState, action: ActionsTypes): PortfolioInitType => {\r\n    switch (action.type) {\r\n        case 'PORTFOLIO/SET-ASSETS':\r\n            return {...state, portfolio: [...state.portfolio, ...action.assets]}\r\n        case 'PORTFOLIO/ADD-ASSET':\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            const asset = state.portfolio.find(item => item.assetId === action.asset.assetId)\r\n            if (asset) {\r\n                state.portfolio.forEach(item => {\r\n                    if (item.assetId === action.asset.assetId) {\r\n                        item.count = item.count + action.asset.count\r\n                        item.price = item.price + action.asset.price\r\n                    }\r\n                })\r\n                return {\r\n                    ...state, currentAssetSessions: state.currentAssetSessions + currentAssetSession,\r\n                    percent: action.asset.price * 100 / currentAssetSession,\r\n                    portfolio: [...state.portfolio]\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                currentAssetSessions: state.currentAssetSessions + action.asset.price,\r\n                percent: action.asset.price * 100 / action.asset.price,\r\n                portfolio: [...state.portfolio, action.asset]\r\n            }\r\n        case 'PORTFOLIO/UPDATE-PERCENT': {\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            return {\r\n                ...state, currentAssetSessions: state.currentAssetSessions - action.asset.price,\r\n                percent: action.asset.price * 100 / currentAssetSession\r\n            }\r\n        }\r\n        case 'PORTFOLIO/REMOVE-ASSET':\r\n            return {\r\n                ...state, portfolio: state.portfolio.map((element) => {\r\n                    if (element.assetId === action.asset.assetId) {\r\n                        return {\r\n                            ...element, count: element.count - action.asset.count,\r\n                            price: element.price - action.asset.price\r\n                        }\r\n                    }\r\n                    return element\r\n                })\r\n\r\n            }\r\n        case 'PORTFOLIO/CHANGE-PAGE':\r\n            return {...state, currentPage: action.page}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//action\r\nexport const addAsset = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/ADD-ASSET', asset} as const\r\n}\r\nexport const updateCurrAssetPercent = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/UPDATE-PERCENT', asset} as const\r\n}\r\nexport const setAssets = (assets: AddAssetType[]) => {\r\n    return {type: 'PORTFOLIO/SET-ASSETS', assets} as const\r\n}\r\nexport const changePage = (page: number) => {\r\n    return {type: 'PORTFOLIO/CHANGE-PAGE', page} as const\r\n}\r\nexport const removeAssetPortfolio = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/REMOVE-ASSET', asset} as const\r\n}\r\n\r\n//types\r\nexport type PortfolioInitType = typeof initialState\r\n\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Assets.scss'\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { ModalForAssets } from '../ModalForAssets/ModalForAssets';\r\nimport { addAsset } from '../../../Bll/Portfolio-reducer';\r\n\r\n\r\ntype AssetsType = {\r\n    item: CryptocurrencyListType\r\n}\r\nexport const Assets = React.memo(({item}: AssetsType) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const openMoreInfo = (id: string) => {\r\n        return history.push(`/currency-info/${id}`)\r\n    }\r\n    const addAssetsHandler = (assetsCount: number) => {\r\n        const newAccount = {\r\n            assetId: item.id,\r\n            count: assetsCount,\r\n            price: Number(item.priceUsd) * assetsCount\r\n        }\r\n        dispatch(addAsset(newAccount))\r\n        setShowModal(!showModal)\r\n    }\r\n    const openModalPortfoliolHandler = () => {\r\n        setShowModal(true)\r\n    }\r\n\r\n    return (<div className=\"main__body\">\r\n            {showModal && <ModalForAssets assets={item} addAssetsHandler={addAssetsHandler} showModal={setShowModal}/>}\r\n            <div className=\"main__body__block\">\r\n                <p>{item.rank}</p>\r\n                <p>{item.name}</p>\r\n                <p>${(+item.priceUsd).toFixed(2)}</p>\r\n                <Button className=\"block_btn\" onClick={() => openMoreInfo(item.id)} variant=\"outline-primary\">More\r\n                    info</Button>\r\n                <Button className=\"block_btn\" onClick={openModalPortfoliolHandler} variant=\"outline-primary\">Buy\r\n                    currency</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import { ActionsTypes } from '../Store/Store';\r\n\r\n\r\n\r\nconst initialState  = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\nexport const appReducer = (state = initialState , action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-APP-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setAppStatus = (status:RequestStatusType) => {\r\n  return {type: 'APP/SET-APP-STATUS', status} as const\r\n}\r\nexport const setAppError = (error:string | null) => {\r\n    return {type: 'APP/SET-APP-ERROR', error} as const\r\n}\r\n\r\nexport type RequestStatusType = 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = typeof initialState","import axios from 'axios';\r\nimport { AssetsType, DataHistoryAssetsType } from './Types';\r\n\r\nconst createInstance = axios.create({\r\n    baseURL: 'https://api.coincap.io/v2/',\r\n\r\n})\r\n\r\nexport const api = {\r\n    getAssets() {\r\n        return createInstance.get<AssetsType>('assets')\r\n    },\r\n    getChartData(id:string){\r\n        return createInstance.get<DataHistoryAssetsType>(`assets/${id}/history`, { params: { interval: 'd1' } })\r\n    },\r\n    topAssets(){\r\n        return createInstance.get<AssetsType>('assets?limit=3')\r\n    }\r\n}\r\n\r\n","import { CryptocurrencyListType, DataChartType } from '../Dal/Types';\r\nimport { ActionsTypes, AppDispatchType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\nimport { api } from '../Dal/Api';\r\n\r\nconst initialState = {\r\n    dataAssets: [] as CryptocurrencyListType[],\r\n    timestamp: null as number | null,\r\n    chartData: [] as DataChartType[],\r\n    topAssets: [] as CryptocurrencyListType[]\r\n}\r\n\r\nexport const cryptocurrencyReducer = (state = initialState, action: ActionsTypes): CryptocurrencyInitType => {\r\n    switch (action.type) {\r\n        case 'CRYPT/SET-CURRENT-ASSETS':\r\n            return {...state, dataAssets: action.data, timestamp: action.timestamp}\r\n        case 'CRYPT/SET-DATA-CHART':\r\n            return {...state, chartData: action.data}\r\n        case  'CRYPT/SET-TOP-DATA-ASSETS':\r\n            return {...state, topAssets: action.data}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//action\r\nexport const setDataAssets = (data: CryptocurrencyListType[], timestamp: number) => {\r\n    return {type: 'CRYPT/SET-CURRENT-ASSETS', data, timestamp} as const\r\n}\r\nexport const setDataChart = (data: DataChartType[]) => {\r\n    return {type: 'CRYPT/SET-DATA-CHART', data} as const\r\n}\r\nexport const setTopDataAssets = (data: CryptocurrencyListType[]) => {\r\n    return {type: 'CRYPT/SET-TOP-DATA-ASSETS', data} as const\r\n}\r\n\r\n//thunk\r\nexport const getDataAssetsTC = () => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.getAssets()\r\n        const {data, timestamp} = response.data\r\n        dispatch(setDataAssets(data, timestamp))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getDataTopAssetsTC = () => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.topAssets()\r\n        const {data} = response.data\r\n        dispatch(setTopDataAssets(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getChartDataTC = (id: string) => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await  api.getChartData(id)\r\n        const {data} = response.data\r\n        dispatch(setDataChart(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type CryptocurrencyInitType = typeof initialState\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './Preloader.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\" >\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport './Paginator.scss'\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n    onPageChange: (page: number) => void\r\n\r\n}\r\nexport const Paginator = (props: PaginatorType) => {\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div className=\"paginator\">\r\n        {\r\n            pages\r\n                .map(page => {\r\n                    return <span\r\n                        className={props.currentPage === page ? 'paginator__selected' : 'paginator__unselected'}\r\n                        key={page}\r\n                        onClick={() => props.onPageChange(page)}>\r\n                       {page}\r\n                   </span>\r\n                })}\r\n    </div>\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport './AlertError.scss'\r\n\r\ntype AlertErrorType = {\r\n\r\n}\r\nexport const AlertError = (props:AlertErrorType ) => {\r\n    const [show, setShow] = useState(true);\r\n    const closeAlert = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n                    <Alert className=\"alert\" show={show} variant=\"primary\">\r\n                        <Alert.Heading>The server is overloaded</Alert.Heading>\r\n                        <Button onClick={closeAlert} variant=\"outline-primary\">\r\n                            Close Alert!\r\n                        </Button>\r\n                    </Alert>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './Table.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Assets } from './Asset/Assets';\r\nimport { getDataAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { Paginator } from '../Common/Paginator/Paginator';\r\nimport { AlertError } from '../Common/AlertError/AlertError';\r\nimport { changePage } from '../../Bll/Portfolio-reducer';\r\n\r\nexport const Table = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataAssetsTC())\r\n    }, [dispatch])\r\n\r\n    const dataAssets = useSelector<AppStateType, CryptocurrencyListType[]>\r\n    ((state) => state.cryptocurrencyList.dataAssets)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const pageCurrent = useSelector<AppStateType, number>(state => state.portfolio.currentPage)\r\n\r\n\r\n    const totalCount = dataAssets.length\r\n    const pageSize = 10\r\n    const lastCurrentsPage = pageCurrent * pageSize\r\n    const firstCurrentPage = lastCurrentsPage - pageSize\r\n    const currentElements = dataAssets.slice(firstCurrentPage, lastCurrentsPage)\r\n\r\n    const onPageChange = (page: number) => dispatch(changePage(page))\r\n\r\n    return <div className=\"main\">\r\n        <Paginator onPageChange={onPageChange} totalCount={totalCount} pageSize={pageSize}\r\n                   currentPage={pageCurrent}/>\r\n        {status === 'failed' && <AlertError/>}\r\n        <div className=\"main__header\">\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Price</p>\r\n        </div>\r\n        {\r\n            status === 'loading' ? <Preloader/> : currentElements.map((i) => {\r\n                return <Assets key={i.id} item={i}/>\r\n            })\r\n        }\r\n    </div>\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Header.scss'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { PortfolioInitType } from '../../Bll/Portfolio-reducer';\r\nimport { getDataTopAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\n\r\n\r\nexport const Header = () => {\r\n    const topAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.topAssets)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state =>  state.app.status)\r\n\r\n    const {\r\n        portfolio,\r\n        percent,\r\n        currentAssetSessions\r\n    } = useSelector<AppStateType, PortfolioInitType>(state => state.portfolio)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataTopAssetsTC())\r\n    }, [dispatch])\r\n    const portfolioAmount = portfolio && portfolio.reduce((acc, curr) =>\r\n        acc + Number(curr.price), 0).toFixed(2)\r\n\r\n    return <div className=\"header\">\r\n        {status === 'loading' && <Preloader/>}\r\n        {topAssets.map((topAssets) => {\r\n            return <div className=\"header__assets\" key={topAssets.id}>\r\n                <p className=\"header__assets-text\">{topAssets.name}</p>\r\n                <p className=\"header__assets-text\">${(+topAssets.priceUsd).toFixed(2)}</p>\r\n            </div>\r\n        })}\r\n        <div className=\"header__totalCounts\">\r\n            <p className=\"header__totalCounts-text\">Wallet:{portfolioAmount}USD</p>\r\n            <p className=\"header__totalCounts-text\">Session:{(currentAssetSessions).toFixed(2)}USD</p>\r\n            <p className=\"header__totalCounts-text\">{percent !== Infinity && percent.toFixed(3)}% </p>\r\n        </div>\r\n\r\n        <NavLink className=\"header__link\" to={'/portfolio'}> My Portfolio</NavLink>\r\n    </div>\r\n}","import { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { removeAssetPortfolio, updateCurrAssetPercent } from '../../../Bll/Portfolio-reducer';\r\nimport { AddAssetType, CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './Wallet.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\n\r\ntype WalletType = {\r\n    asset: AddAssetType\r\n    currentAssets: AddAssetType[]\r\n}\r\nexport const Wallet = React.memo(({asset, currentAssets}: WalletType) => {\r\n    const [countDelete, setCountDelete] = useState<string>('')\r\n    const [changeAsset, setChangeAsset] = useState<boolean>(false)\r\n    const valueAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.dataAssets)\r\n    const dispatch = useDispatch()\r\n    const removeCountAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > -1) {\r\n            setCountDelete(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    const removeAssetHandler = (assetId: string) => {\r\n        const count = currentAssets.find(count => count.assetId === assetId)\r\n        const assetValue = valueAssets.find((value) => value.id === assetId && value.priceUsd)\r\n        if (count && assetValue) {\r\n            const assetRemove = {\r\n                assetId: assetId,\r\n                count: Number(countDelete),\r\n                price: Number(assetValue.priceUsd) * Number(countDelete)\r\n            }\r\n            if (asset.count < assetRemove.count) return\r\n            dispatch(updateCurrAssetPercent(assetRemove))\r\n            dispatch(removeAssetPortfolio(assetRemove))\r\n\r\n        }\r\n        setChangeAsset(false)\r\n    }\r\n\r\n    const changeAssetHandler = () => setChangeAsset(!changeAsset)\r\n\r\n    return <div className=\"wallet\">\r\n        <Button onClick={changeAssetHandler} variant=\"primary\">Change {asset.assetId}</Button>\r\n        {changeAsset ? <InputGroup className=\"mb-3\">\r\n                <InputGroup.Text>{asset.assetId}</InputGroup.Text>\r\n                <InputGroup.Text>{asset.count}</InputGroup.Text>\r\n                <FormControl type=\"number\" value={countDelete} onChange={removeCountAssets}/>\r\n                <Button variant=\"primary\" onClick={() => removeAssetHandler(asset.assetId)}>sale</Button>\r\n            </InputGroup>\r\n            :\r\n            <div className=\"wallet__block\">\r\n                <span>{asset.assetId}</span>\r\n                <span>${(asset.price).toFixed(1)}</span>\r\n                <span>{asset.count}</span>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n})","import React from 'react';\r\nimport './Portfolio.scss'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { AddAssetType } from '../../Dal/Types';\r\nimport { Wallet } from './Wallet/Wallet';\r\n\r\nexport const Portfolio = () => {\r\n    const currentAssets = useSelector<AppStateType, AddAssetType[]>(state => state.portfolio.portfolio)\r\n    const history = useHistory();\r\n    const goBackHandler = () => history.goBack()\r\n    const checkingCurrentAsset = currentAssets.filter(asset => asset.count !== 0)\r\n\r\n    return <Modal show={true}>\r\n        <Modal.Header>\r\n            <Modal.Title>My Portfolio</Modal.Title>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            {!checkingCurrentAsset.length && <div>Your Wallet Is Empty</div>}\r\n            {checkingCurrentAsset.map((asset) => {\r\n                return <Wallet currentAssets={currentAssets} key={asset.assetId} asset={asset}/>\r\n            })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n\r\n        </Modal.Footer>\r\n    </Modal>\r\n}\r\n","import React from 'react';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport './Chart.scss';\r\nimport { DataChartType } from '../../../Dal/Types';\r\n\r\n\r\nexport type ChartsType = {\r\n    data: DataChartType[]\r\n}\r\nexport const Charts = ({data}: ChartsType) => {\r\n    const options = {\r\n        series: [{\r\n            type: 'area',\r\n            data: data && data.map(item => +item.priceUsd)\r\n        }]\r\n    }\r\n    return (<HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}/>\r\n    );\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './CurrencyInfo.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\nimport { Charts } from '../../Common/Chart/Chart';\r\nimport { CryptocurrencyInitType, getChartDataTC } from '../../../Bll/Crypt-coin-list-reducer';\r\n\r\n\r\nexport const CurrencyInfo = () => {\r\n    const {id} = useParams<{ id: string }>();\r\n    const data = useSelector<AppStateType, CryptocurrencyInitType>(state => state.cryptocurrencyList)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n    const goBackHandler = () => {\r\n        history.goBack()\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getChartDataTC(id))\r\n    }, [dispatch, id])\r\n    return (\r\n        <div>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n            <table className=\"table table-hover table-sm\">\r\n                <thead>\r\n                <tr className=\"table-primary\">\r\n                    <th scope=\"col\">Rank</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Market Cap</th>\r\n                    <th scope=\"col\">VWAP(24Hr)</th>\r\n                    <th scope=\"col\">Supply</th>\r\n                    <th scope=\"col\">Volume(24Hr)</th>\r\n                    <th scope=\"col\">Change(24Hr)</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    data.dataAssets.filter(i => i.id === id).map((i) => {\r\n                        return <tr key={i.id}>\r\n                            <th scope=\"row\">{i.rank}</th>\r\n                            <th>{i.name}</th>\r\n                            <th>${(+i.priceUsd).toFixed(5)}</th>\r\n                            <th>${(+i.marketCapUsd).toFixed(5)}</th>\r\n                            <th>${(+i.vwap24Hr).toFixed(2)}</th>\r\n                            <th>{(+i.supply).toFixed(5)}B</th>\r\n                            <th>{(+i.volumeUsd24Hr).toFixed(5)}B</th>\r\n                            <th>{(+i.changePercent24Hr).toFixed(2)}%</th>\r\n                        </tr>\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <Charts data={data.chartData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table } from './Component/Table/Table';\nimport { Header } from './Component/Header/Header';\nimport { Portfolio } from './Component/Portfolio/Portfolio';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { CurrencyInfo } from './Component/Table/CurrencyInfo/CurrencyInfo';\n\n\nconst App = () => {\n\n    return (\n        <div className=\"container\">\n            <Header/>\n                <Route>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <Redirect to={'/table'}/>}/>\n                        <Route path={'/portfolio'} render={() => <Portfolio/>}/>\n                        <Route path={'/table'} render={() => <Table/>}/>\n                        <Route path={'/currency-info/:id'} render={() => <CurrencyInfo/>}/>\n                    </Switch>\n                </Route>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { Dispatch } from 'react';\r\nimport ThunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { cryptocurrencyReducer, setDataAssets, setDataChart, setTopDataAssets } from '../Bll/Crypt-coin-list-reducer';\r\nimport {\r\n    addAsset, changePage,\r\n    portfolioReducer,\r\n    removeAssetPortfolio,\r\n    setAssets,\r\n    updateCurrAssetPercent\r\n} from '../Bll/Portfolio-reducer';\r\nimport { appReducer, setAppError, setAppStatus } from '../Bll/App-reducer';\r\nimport { loadState, saveState } from '../Component/Common/Utils/localstorage-utils';\r\n\r\nconst rootReducer = combineReducers({\r\n    cryptocurrencyList: cryptocurrencyReducer,\r\n    portfolio: portfolioReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(ThunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        portfolio: store.getState().portfolio,\r\n    })\r\n})\r\n\r\n//type\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof setDataAssets>\r\n    | ReturnType<typeof setDataChart>\r\n    | ReturnType<typeof setTopDataAssets>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof addAsset>\r\n    | ReturnType<typeof removeAssetPortfolio>\r\n    | ReturnType<typeof setAssets>\r\n    | ReturnType<typeof updateCurrAssetPercent>\r\n    | ReturnType<typeof changePage>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import { AppStateType } from '../../../Store/Store';\r\nimport { AddAssetType } from '../../../Dal/Types';\r\n\r\nconst checkingArrayAssets = (serializedState: string) => {\r\n    const parsedState: AppStateType = JSON.parse(serializedState);\r\n    const portfolio = parsedState.portfolio.portfolio.filter((asset: AddAssetType) => asset.count !== 0)\r\n    return {...parsedState, portfolio: {...parsedState.portfolio, portfolio: portfolio, percent: 0, currentAssetSessions: 0 }}\r\n}\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('portfolioAssets');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n\r\n        return checkingArrayAssets(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state: any) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('portfolioAssets', serializedState);\r\n    } catch (error) {\r\n        return undefined\r\n    }\r\n};\r\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/Store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <HashRouter>\n     <Provider store={store}>\n         <App />\n     </Provider>\n   </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}