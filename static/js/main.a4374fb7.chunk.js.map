{"version":3,"sources":["Component/Table/ModalForAssets/ModalForAssets.tsx","Bll/Portfolio-reducer.ts","Component/Table/Asset/Assets.tsx","Bll/App-reducer.ts","Dal/Api.ts","Bll/Crypt-coin-list-reducer.ts","Component/Common/Preloader/Preloader.tsx","Component/Common/Paginator/Paginator.tsx","Component/Common/AlertError/AlertError.tsx","Component/Table/Table.tsx","Component/Header/Header.tsx","Component/Portfolio/Wallet/Wallet.tsx","Component/Portfolio/Portfolio.tsx","Component/Common/Chart/Chart.tsx","Component/Table/CurrencyInfo/CurrencyInfo.tsx","App.tsx","reportWebVitals.js","Store/Store.ts","Component/Common/Utils/localstorage-utils.ts","index.tsx"],"names":["ModalForAssets","props","useState","assetsCount","setAssetsCount","currentValueAsset","Number","assets","priceUsd","toFixed","Modal","show","Header","Title","Button","onClick","showModal","variant","Body","name","InputGroup","className","FormControl","type","value","onChange","e","currentTarget","Text","Footer","addAssetsHandler","initialState","portfolio","percent","currentAssetSessions","Assets","React","memo","item","setShowModal","dispatch","useDispatch","history","useHistory","newAccount","assetId","id","count","price","asset","rank","push","status","error","setAppStatus","createInstance","axios","create","baseURL","api","get","params","interval","dataAssets","timestamp","chartData","topAssets","setDataAssets","data","setDataChart","setTopDataAssets","getDataAssetsTC","a","response","Preloader","Spinner","animation","Paginator","pageCount","Math","ceil","totalCount","pageSize","pages","i","map","page","currentPage","onPageChange","AlertError","counter","setCounter","setShow","useEffect","setTimeout","Alert","Heading","Table","useSelector","state","cryptocurrencyList","setCurrentPages","app","length","lastCurrentsPage","firstCurrentPage","currentElements","slice","portfolioAmount","reduce","acc","curr","Infinity","to","Wallet","currentAssets","countDelete","setCountDelete","changeAsset","setChangeAsset","valueAssets","find","assetValue","assetRemove","updateCurrAssetPercent","removeAssetPortfolio","removeAssetHandler","Portfolio","checkingCurrentAsset","filter","goBack","Charts","options","series","highcharts","Highcharts","CurrencyInfo","useParams","getChartDataTC","scope","marketCapUsd","vwap24Hr","supply","volumeUsd24Hr","changePercent24Hr","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","currentAssetSession","forEach","element","store","createStore","serializedState","localStorage","getItem","parsedState","JSON","parse","checkingArrayAssets","err","loadState","applyMiddleware","ThunkMiddleware","subscribe","stringify","setItem","console","log","saveState","getState","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4374fb7.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, FormControl, InputGroup, Modal } from 'react-bootstrap';\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\n\r\ntype ModalForAssetsType = {\r\n    assets: CryptocurrencyListType\r\n    showModal: (show: boolean) => void\r\n    addAssetsHandler: (countAssets: number) => void\r\n}\r\nexport const ModalForAssets = (props: ModalForAssetsType) => {\r\n    const [assetsCount, setAssetsCount] = useState<string>('')\r\n    const onChangeAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (Number(e.currentTarget.value) > -1) {\r\n            setAssetsCount(e.currentTarget.value)\r\n        }\r\n    }\r\n    const onAddAssetsHandler = () => +assetsCount !== 0 && props.addAssetsHandler(Number(assetsCount))\r\n    const currentValueAsset = (Number(props.assets.priceUsd) * Number(assetsCount)).toFixed(2)\r\n    return (<Modal show={true}>\r\n            <Modal.Header>\r\n                <Modal.Title>Add to portfolio</Modal.Title>\r\n                <Button onClick={() => props.showModal(false)} variant=\"primary\">close</Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    Do you want to add <strong>{props.assets.name}</strong> to your portfolio\r\n                </div>\r\n                <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl type=\"number\" value={assetsCount} onChange={onChangeAssets}/>\r\n                        <InputGroup.Text>${currentValueAsset}</InputGroup.Text>\r\n                    </InputGroup>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={onAddAssetsHandler} variant=\"primary\">\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n","import { AddAssetType } from '../Dal/Types';\r\nimport { ActionsTypes } from '../Store/Store';\r\n\r\n\r\nconst initialState = {\r\n    portfolio: [] as AddAssetType[],\r\n    percent: 0,\r\n    currentAssetSessions: 0\r\n}\r\n\r\nexport const portfolioReducer = (state = initialState, action: ActionsTypes): PortfolioInitType => {\r\n    switch (action.type) {\r\n        case 'PORTFOLIO/SET-ASSETS':\r\n            return {...state, portfolio: [...state.portfolio, ...action.assets]}\r\n        case 'PORTFOLIO/ADD-ASSET':\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            const asset = state.portfolio.find(item => item.assetId === action.asset.assetId)\r\n            if (asset) {\r\n                state.portfolio.forEach(item => {\r\n                    if (item.assetId === action.asset.assetId) {\r\n                        item.count = item.count + action.asset.count\r\n                        item.price = item.price + action.asset.price\r\n                    }\r\n                })\r\n                return {\r\n                    ...state, currentAssetSessions: state.currentAssetSessions + currentAssetSession,\r\n                    percent: action.asset.price * 100 / currentAssetSession,\r\n                    portfolio: [...state.portfolio]\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                currentAssetSessions: state.currentAssetSessions + action.asset.price,\r\n                percent: action.asset.price * 100 / action.asset.price,\r\n                portfolio: [...state.portfolio, action.asset]\r\n            }\r\n        case 'PORTFOLIO/UPDATE-PERCENT': {\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            return {\r\n                ...state, currentAssetSessions: state.currentAssetSessions - action.asset.price,\r\n                percent: action.asset.price * 100 / currentAssetSession\r\n            }\r\n        }\r\n        case 'PORTFOLIO/REMOVE-ASSET':\r\n            return {\r\n                ...state, portfolio: state.portfolio.map((element) => {\r\n                    if (element.assetId === action.asset.assetId) {\r\n                        return {\r\n                            ...element, count: element.count - action.asset.count,\r\n                            price: element.price - action.asset.price\r\n                        }\r\n                    }\r\n                    return element\r\n                })\r\n\r\n            }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//action\r\nexport const addAsset = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/ADD-ASSET', asset} as const\r\n}\r\nexport const updateCurrAssetPercent = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/UPDATE-PERCENT', asset} as const\r\n}\r\nexport const setAssets = (assets: AddAssetType[]) => {\r\n    return {type: 'PORTFOLIO/SET-ASSETS', assets} as const\r\n}\r\nexport const removeAssetPortfolio = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/REMOVE-ASSET', asset} as const\r\n}\r\n\r\n//types\r\nexport type PortfolioInitType = typeof initialState\r\n\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Assets.scss'\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { ModalForAssets } from '../ModalForAssets/ModalForAssets';\r\nimport { addAsset } from '../../../Bll/Portfolio-reducer';\r\n\r\n\r\ntype AssetsType = {\r\n    item: CryptocurrencyListType\r\n}\r\nexport const Assets = React.memo(({item}: AssetsType) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const openMoreInfo = (id: string) => {\r\n        return history.push(`/currency-info/${id}`)\r\n    }\r\n    const addAssetsHandler = (assetsCount: number) => {\r\n        const newAccount = {\r\n            assetId: item.id,\r\n            count: assetsCount,\r\n            price: Number(item.priceUsd) * assetsCount\r\n        }\r\n        dispatch(addAsset(newAccount))\r\n        setShowModal(!showModal)\r\n    }\r\n    const openModalPortfoliolHandler = () => {\r\n        setShowModal(true)\r\n    }\r\n\r\n    return (<div className=\"main__body\">\r\n            {showModal && <ModalForAssets assets={item} addAssetsHandler={addAssetsHandler} showModal={setShowModal}/>}\r\n            <div className=\"main__body__block\">\r\n                <p>{item.rank}</p>\r\n                <p>{item.name}</p>\r\n                <p>${(+item.priceUsd).toFixed(2)}</p>\r\n                <Button className=\"block_btn\" onClick={() => openMoreInfo(item.id)} variant=\"outline-primary\">More\r\n                    info</Button>\r\n                <Button className=\"block_btn\" onClick={openModalPortfoliolHandler} variant=\"outline-primary\">Buy\r\n                    currency</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import { ActionsTypes } from '../Store/Store';\r\n\r\n\r\n\r\nconst initialState  = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\nexport const appReducer = (state = initialState , action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-APP-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setAppStatus = (status:RequestStatusType) => {\r\n  return {type: 'APP/SET-APP-STATUS', status} as const\r\n}\r\nexport const setAppError = (error:string | null) => {\r\n    return {type: 'APP/SET-APP-ERROR', error} as const\r\n}\r\n\r\nexport type RequestStatusType = 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = typeof initialState","import axios from 'axios';\r\nimport { AssetsType, DataHistoryAssetsType } from './Types';\r\n\r\nconst createInstance = axios.create({\r\n    baseURL: 'https://api.coincap.io/v2/',\r\n\r\n})\r\n\r\nexport const api = {\r\n    getAssets() {\r\n        return createInstance.get<AssetsType>('assets')\r\n    },\r\n    getChartData(id:string){\r\n        return createInstance.get<DataHistoryAssetsType>(`assets/${id}/history`, { params: { interval: 'd1' } })\r\n    },\r\n    topAssets(){\r\n        return createInstance.get<AssetsType>('assets?limit=3')\r\n    }\r\n}\r\n\r\n","import { CryptocurrencyListType, DataChartType } from '../Dal/Types';\r\nimport { ActionsTypes, AppDispatchType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\nimport { api } from '../Dal/Api';\r\n\r\nconst initialState = {\r\n    dataAssets: [] as CryptocurrencyListType[],\r\n    timestamp: null as number | null,\r\n    chartData: [] as DataChartType[],\r\n    topAssets: [] as CryptocurrencyListType[]\r\n}\r\n\r\nexport const cryptocurrencyReducer = (state = initialState, action: ActionsTypes): CryptocurrencyInitType => {\r\n    switch (action.type) {\r\n        case 'CRYPT/SET-CURRENT-ASSETS':\r\n            return {...state, dataAssets: action.data, timestamp: action.timestamp}\r\n        case 'CRYPT/SET-DATA-CHART':\r\n            return {...state, chartData: action.data}\r\n        case  'CRYPT/SET-TOP-DATA-ASSETS':\r\n            return {...state, topAssets: action.data}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//action\r\nexport const setDataAssets = (data: CryptocurrencyListType[], timestamp: number) => {\r\n    return {type: 'CRYPT/SET-CURRENT-ASSETS', data, timestamp} as const\r\n}\r\nexport const setDataChart = (data: DataChartType[]) => {\r\n    return {type: 'CRYPT/SET-DATA-CHART', data} as const\r\n}\r\nexport const setTopDataAssets = (data: CryptocurrencyListType[]) => {\r\n    return {type: 'CRYPT/SET-TOP-DATA-ASSETS', data} as const\r\n}\r\n\r\n//thunk\r\nexport const getDataAssetsTC = () => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.getAssets()\r\n        const {data, timestamp} = response.data\r\n        dispatch(setDataAssets(data, timestamp))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getDataTopAssetsTC = () => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.topAssets()\r\n        const {data} = response.data\r\n        dispatch(setTopDataAssets(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getChartDataTC = (id: string) => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await  api.getChartData(id)\r\n        const {data} = response.data\r\n        dispatch(setDataChart(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\n\r\n//types\r\nexport type CryptocurrencyInitType = typeof initialState\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './Preloader.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\" >\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport './Paginator.scss'\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n    onPageChange: (page: number) => void\r\n\r\n}\r\nexport const Paginator = (props: PaginatorType) => {\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div className=\"paginator\">\r\n        {\r\n            pages\r\n                .map(page => {\r\n                    return <span\r\n                        className={props.currentPage === page ? 'paginator__selected' : 'paginator__unselected'}\r\n                        key={page}\r\n                        onClick={() => props.onPageChange(page)}>\r\n                       {page}\r\n                   </span>\r\n                })}\r\n    </div>\r\n};\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport './AlertError.scss'\r\nimport { getDataAssetsTC } from '../../../Bll/Crypt-coin-list-reducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype AlertErrorType = {\r\n\r\n}\r\nexport const AlertError = (props:AlertErrorType ) => {\r\n    const [counter, setCounter] = useState(7);\r\n    const dispatch = useDispatch()\r\n    const [show, setShow] = useState(true);\r\n    const closeAlert = () => {\r\n        setShow(false)\r\n    }\r\n    useEffect(() => {\r\n        counter > 0 ? setTimeout(() => setCounter(counter - 1), 1000) : dispatch(getDataAssetsTC())\r\n    }, [counter,dispatch]);\r\n    return (\r\n        <>\r\n                    <Alert className=\"alert\" show={show} variant=\"primary\">\r\n                        <Alert.Heading>The server is overloaded</Alert.Heading>\r\n                        <Alert.Heading>Automatic reboot: {counter}</Alert.Heading>\r\n                        <Button onClick={closeAlert} variant=\"outline-primary\">\r\n                            Close Alert!\r\n                        </Button>\r\n                    </Alert>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Table.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Assets } from './Asset/Assets';\r\nimport { getDataAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { Paginator } from '../Common/Paginator/Paginator';\r\nimport { AlertError } from '../Common/AlertError/AlertError';\r\n\r\nexport const Table = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataAssetsTC())\r\n    }, [dispatch])\r\n\r\n    const dataAssets = useSelector<AppStateType, CryptocurrencyListType[]>\r\n    ((state) => state.cryptocurrencyList.dataAssets)\r\n    const [currentPage, setCurrentPages] = useState(1)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n\r\n\r\n    const totalCount = dataAssets.length\r\n    const onPageChange = (page: number) => {\r\n        setCurrentPages(page)\r\n    }\r\n    const pageSize = 10\r\n    const lastCurrentsPage = currentPage * pageSize\r\n    const firstCurrentPage = lastCurrentsPage - pageSize\r\n    const currentElements = dataAssets.slice(firstCurrentPage, lastCurrentsPage)\r\n\r\n    return <div className=\"main\">\r\n        <Paginator onPageChange={onPageChange} totalCount={totalCount} pageSize={pageSize}\r\n                   currentPage={currentPage}/>\r\n        {status === 'failed' && <AlertError/>}\r\n        <div className=\"main__header\">\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Price</p>\r\n        </div>\r\n        {\r\n            status === 'loading' ? <Preloader/> : currentElements.map((i) => {\r\n                return <Assets key={i.id} item={i}/>\r\n            })\r\n        }\r\n    </div>\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Header.scss'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { PortfolioInitType } from '../../Bll/Portfolio-reducer';\r\nimport { getDataTopAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\n\r\n\r\nexport const Header = () => {\r\n    const topAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.topAssets)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state =>  state.app.status)\r\n\r\n    const {\r\n        portfolio,\r\n        percent,\r\n        currentAssetSessions\r\n    } = useSelector<AppStateType, PortfolioInitType>(state => state.portfolio)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataTopAssetsTC())\r\n    }, [dispatch])\r\n    const portfolioAmount = portfolio && portfolio.reduce((acc, curr) =>\r\n        acc + Number(curr.price), 0).toFixed(2)\r\n\r\n    return <div className=\"header\">\r\n        {status === 'loading' && <Preloader/>}\r\n        {topAssets.map((topAssets) => {\r\n            return <div className=\"header__assets\" key={topAssets.id}>\r\n                <p className=\"header__assets-text\">{topAssets.name}</p>\r\n                <p className=\"header__assets-text\">${(+topAssets.priceUsd).toFixed(2)}</p>\r\n            </div>\r\n        })}\r\n        <div className=\"header__totalCounts\">\r\n            <p className=\"header__totalCounts-text\">Wallet:{portfolioAmount}USD</p>\r\n            <p className=\"header__totalCounts-text\">Session:{(currentAssetSessions).toFixed(2)}USD</p>\r\n            <p className=\"header__totalCounts-text\">{percent !== Infinity && percent.toFixed(3)}% </p>\r\n        </div>\r\n\r\n        <NavLink className=\"header__link\" to={'/portfolio'}> My Portfolio</NavLink>\r\n    </div>\r\n}","import { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { removeAssetPortfolio, updateCurrAssetPercent } from '../../../Bll/Portfolio-reducer';\r\nimport { AddAssetType, CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './Wallet.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\n\r\ntype WalletType = {\r\n    asset: AddAssetType\r\n    currentAssets: AddAssetType[]\r\n}\r\nexport const Wallet = React.memo(({asset, currentAssets}: WalletType) => {\r\n    const [countDelete, setCountDelete] = useState<string>('')\r\n    const [changeAsset, setChangeAsset] = useState<boolean>(false)\r\n    const valueAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.dataAssets)\r\n    const dispatch = useDispatch()\r\n    const removeCountAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > -1) {\r\n            setCountDelete(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    const removeAssetHandler = (assetId: string) => {\r\n        const count = currentAssets.find(count => count.assetId === assetId)\r\n        const assetValue = valueAssets.find((value) => {\r\n            if (value.id === assetId) {\r\n                return value.priceUsd\r\n            }\r\n        })\r\n        if (count && assetValue) {\r\n            const assetRemove = {\r\n                assetId: assetId,\r\n                count: Number(countDelete),\r\n                price: Number(assetValue.priceUsd) * Number(countDelete)\r\n            }\r\n            if (asset.count < assetRemove.count) return\r\n            dispatch(updateCurrAssetPercent(assetRemove))\r\n            dispatch(removeAssetPortfolio(assetRemove))\r\n\r\n        }\r\n        setChangeAsset(false)\r\n    }\r\n\r\n    const changeAssetHandler = () => setChangeAsset(!changeAsset)\r\n\r\n    return <div className=\"wallet\">\r\n        <Button onClick={changeAssetHandler} variant=\"primary\">Change {asset.assetId}</Button>\r\n        {changeAsset ? <InputGroup className=\"mb-3\">\r\n                <InputGroup.Text>{asset.assetId}</InputGroup.Text>\r\n                <InputGroup.Text>{asset.count}</InputGroup.Text>\r\n                <FormControl type=\"number\" value={countDelete} onChange={removeCountAssets}/>\r\n                <Button variant=\"primary\" onClick={() => removeAssetHandler(asset.assetId)}>sale</Button>\r\n            </InputGroup>\r\n            :\r\n            <div className=\"wallet__block\">\r\n                <span>{asset.assetId}</span>\r\n                <span>${(asset.price).toFixed(1)}</span>\r\n                <span>{asset.count}</span>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n})","import React from 'react';\r\nimport './Portfolio.scss'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { AddAssetType } from '../../Dal/Types';\r\nimport { Wallet } from './Wallet/Wallet';\r\n\r\nexport const Portfolio = () => {\r\n    const currentAssets = useSelector<AppStateType, AddAssetType[]>(state => state.portfolio.portfolio)\r\n    const history = useHistory();\r\n    const goBackHandler = () => history.goBack()\r\n    const checkingCurrentAsset = currentAssets.filter(asset => asset.count !== 0)\r\n\r\n    return <Modal show={true}>\r\n        <Modal.Header>\r\n            <Modal.Title>My Portfolio</Modal.Title>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            {!checkingCurrentAsset.length && <div>Your Wallet Is Empty</div>}\r\n            {checkingCurrentAsset.map((asset) => {\r\n                return <Wallet currentAssets={currentAssets} key={asset.assetId} asset={asset}/>\r\n            })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n\r\n        </Modal.Footer>\r\n    </Modal>\r\n}\r\n","import React from 'react';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport './Chart.scss';\r\nimport { DataChartType } from '../../../Dal/Types';\r\n\r\n\r\nexport type ChartsType = {\r\n    data: DataChartType[]\r\n}\r\nexport const Charts = ({data}: ChartsType) => {\r\n    const options = {\r\n        series: [{\r\n            type: 'area',\r\n            data: data && data.map(item => +item.priceUsd)\r\n        }]\r\n    }\r\n    return (<HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}/>\r\n    );\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './CurrencyInfo.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\nimport { Charts } from '../../Common/Chart/Chart';\r\nimport { CryptocurrencyInitType, getChartDataTC } from '../../../Bll/Crypt-coin-list-reducer';\r\n\r\n\r\nexport const CurrencyInfo = () => {\r\n    const {id} = useParams<{ id: string }>();\r\n    const data = useSelector<AppStateType, CryptocurrencyInitType>(state => state.cryptocurrencyList)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n    const goBackHandler = () => {\r\n        history.goBack()\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getChartDataTC(id))\r\n    }, [dispatch, id])\r\n    return (\r\n        <div>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n            <table className=\"table table-hover table-sm\">\r\n                <thead>\r\n                <tr className=\"table-primary\">\r\n                    <th scope=\"col\">Rank</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Market Cap</th>\r\n                    <th scope=\"col\">VWAP(24Hr)</th>\r\n                    <th scope=\"col\">Supply</th>\r\n                    <th scope=\"col\">Volume(24Hr)</th>\r\n                    <th scope=\"col\">Change(24Hr)</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    data.dataAssets.filter(i => i.id === id).map((i) => {\r\n                        return <tr key={i.id}>\r\n                            <td scope=\"row\">{i.rank}</td>\r\n                            <td>{i.name}</td>\r\n                            <td>${(+i.priceUsd).toFixed(5)}</td>\r\n                            <td>${(+i.marketCapUsd).toFixed(5)}</td>\r\n                            <td>${(+i.vwap24Hr).toFixed(2)}</td>\r\n                            <td>{(+i.supply).toFixed(5)}B</td>\r\n                            <td>{(+i.volumeUsd24Hr).toFixed(5)}B</td>\r\n                            <td>{(+i.changePercent24Hr).toFixed(2)}%</td>\r\n                        </tr>\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <Charts data={data.chartData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table } from './Component/Table/Table';\nimport { Header } from './Component/Header/Header';\nimport { Portfolio } from './Component/Portfolio/Portfolio';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { CurrencyInfo } from './Component/Table/CurrencyInfo/CurrencyInfo';\n\n\nconst App = () => {\n\n    return (\n        <div className=\"container\">\n            <Header/>\n                <Route>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <Redirect to={'/table'}/>}/>\n                        <Route path={'/portfolio'} render={() => <Portfolio/>}/>\n                        <Route path={'/table'} render={() => <Table/>}/>\n                        <Route path={'/currency-info/:id'} render={() => <CurrencyInfo/>}/>\n                    </Switch>\n                </Route>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { Dispatch } from 'react';\r\nimport ThunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { cryptocurrencyReducer, setDataAssets, setDataChart, setTopDataAssets } from '../Bll/Crypt-coin-list-reducer';\r\nimport {\r\n    addAsset,\r\n    portfolioReducer,\r\n    removeAssetPortfolio,\r\n    setAssets,\r\n    updateCurrAssetPercent\r\n} from '../Bll/Portfolio-reducer';\r\nimport { appReducer, setAppError, setAppStatus } from '../Bll/App-reducer';\r\nimport { loadState, saveState } from '../Component/Common/Utils/localstorage-utils';\r\n\r\nconst rootReducer = combineReducers({\r\n    cryptocurrencyList: cryptocurrencyReducer,\r\n    portfolio: portfolioReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(ThunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        portfolio: store.getState().portfolio,\r\n    })\r\n})\r\n\r\n//type\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof setDataAssets>\r\n    | ReturnType<typeof setDataChart>\r\n    | ReturnType<typeof setTopDataAssets>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof addAsset>\r\n    | ReturnType<typeof removeAssetPortfolio>\r\n    | ReturnType<typeof setAssets>\r\n    | ReturnType<typeof updateCurrAssetPercent>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import { AppStateType } from '../../../Store/Store';\nimport { AddAssetType } from '../../../Dal/Types';\n\nconst checkingArrayAssets = (serializedState: string) => {\n    const parsedState: AppStateType = JSON.parse(serializedState);\n    const portfolio = parsedState.portfolio.portfolio.filter((asset: AddAssetType) => asset.count !== 0)\n    return {...parsedState, portfolio: {...parsedState.portfolio, portfolio: portfolio, percent: 0, currentAssetSessions: 0 }}\n}\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('portfolioAssets');\n        if (serializedState === null) {\n            return undefined;\n        }\n\n        return checkingArrayAssets(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\nexport const saveState = (state: any) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('portfolioAssets', serializedState);\n    } catch (error) {\n        return console.log(error)\n    }\n};\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/Store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <HashRouter>\n     <Provider store={store}>\n         <App />\n     </Provider>\n   </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}