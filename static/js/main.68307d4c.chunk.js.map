{"version":3,"sources":["Component/Table/ModalForAssets/ModalForAssets.tsx","Bll/Portfolio-reducer.ts","Component/Table/Asset/Assets.tsx","Dal/Api.ts","Bll/App-reducer.ts","Bll/Crypt-coin-list-reducer.ts","Component/Common/Preloader/Preloader.tsx","Component/Common/Paginator/Paginator.tsx","Component/Common/AlertError/AlertError.tsx","Component/Table/Table.tsx","Component/Header/Header.tsx","Component/Portfolio/Wallet/Wallet.tsx","Component/Portfolio/Portfolio.tsx","Component/Common/Chart/Chart.tsx","Component/Table/CurrencyInfo/CurrencyInfo.tsx","App.tsx","reportWebVitals.js","Store/Store.ts","Component/Common/Utils/localstorage-utils.ts","index.tsx"],"names":["ModalForAssets","props","useState","assetsCount","setAssetsCount","Modal","show","Header","Title","Button","onClick","showModal","variant","Body","assets","name","InputGroup","className","FormControl","type","value","onChange","e","Number","currentTarget","Footer","addAssetsHandler","initialState","portfolio","percent","currentAssetSessions","Assets","React","memo","item","setShowModal","dispatch","useDispatch","history","useHistory","newAccount","assetId","id","count","price","priceUsd","asset","rank","toFixed","push","createInstance","axios","create","baseURL","api","get","params","interval","status","error","setAppStatus","dataAssets","timestamp","chartData","topAssets","Preloader","Spinner","animation","Paginator","pageCount","Math","ceil","totalCount","pageSize","pages","i","map","page","currentPage","onPageChange","AlertError","setShow","Alert","Heading","Table","useEffect","then","res","data","setDataAssets","catch","useSelector","state","cryptocurrencyList","setCurrentPages","app","length","lastCurrentsPage","firstCurrentPage","currentElements","slice","setTopDataAssets","portfolioAmount","reduce","acc","curr","Infinity","to","Wallet","currentAssets","countDelete","setCountDelete","changeAsset","setChangeAsset","valueAssets","Text","find","assetValue","assetRemove","updateCurrAssetPercent","removeAssetPortfolio","removeAssetHandler","Portfolio","goBack","filter","Charts","options","series","highcharts","Highcharts","CurrencyInfo","useParams","setDataChart","getChartDataTC","scope","marketCapUsd","vwap24Hr","supply","volumeUsd24Hr","changePercent24Hr","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","currentAssetSession","forEach","element","store","createStore","serializedState","localStorage","getItem","parsedState","JSON","parse","checkingArrayAssets","err","loadState","applyMiddleware","ThunkMiddleware","subscribe","stateCopy","stringify","setItem","console","log","saveState","getState","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68307d4c.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, FormControl, InputGroup, Modal } from 'react-bootstrap';\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\n\r\ntype ModalForAssetsType = {\r\n    assets: CryptocurrencyListType\r\n    showModal: (show: boolean) => void\r\n    addAssetsHandler: (countAssets: number) => void\r\n}\r\nexport const ModalForAssets = (props: ModalForAssetsType) => {\r\n    const [assetsCount, setAssetsCount] = useState<string>('')\r\n    const onChangeAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (Number(e.currentTarget.value) > -1) {\r\n            setAssetsCount(e.currentTarget.value)\r\n        }\r\n    }\r\n    const onAddAssetsHandler = () => assetsCount && props.addAssetsHandler(Number(assetsCount))\r\n\r\n    return (<Modal show={true}>\r\n            <Modal.Header>\r\n                <Modal.Title>Add to portfolio</Modal.Title>\r\n                <Button onClick={() => props.showModal(false)} variant=\"primary\">close</Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    Do you want to add <strong>{props.assets.name}</strong> to your portfolio\r\n                </div>\r\n                <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl type=\"number\" value={assetsCount} onChange={onChangeAssets}/>\r\n                    </InputGroup>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={onAddAssetsHandler} variant=\"primary\">\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n","import { AddAssetType } from '../Dal/Types';\r\nimport { ActionsTypes } from '../Store/Store';\r\n\r\n\r\nconst initialState = {\r\n    portfolio: [] as AddAssetType[],\r\n    percent: 0,\r\n    currentAssetSessions: 0\r\n}\r\n\r\nexport const portfolioReducer = (state = initialState, action: ActionsTypes): PortfolioInitType => {\r\n    switch (action.type) {\r\n        case 'PORTFOLIO/SET-ASSETS':\r\n            return {...state, portfolio: [...state.portfolio, ...action.assets]}\r\n        case 'PORTFOLIO/ADD-ASSET':\r\n            const currentAssetSession  = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price,0)\r\n            const asset = state.portfolio.find(item => item.assetId === action.asset.assetId)\r\n            if (asset) {\r\n                state.portfolio.forEach(item => {\r\n                    if (item.assetId === action.asset.assetId) {\r\n                        item.count = item.count + action.asset.count\r\n                        item.price = item.price + action.asset.price\r\n                    }\r\n                })\r\n                return {...state,currentAssetSessions: state.currentAssetSessions + currentAssetSession,\r\n                    percent: action.asset.price * 100 /  currentAssetSession,\r\n                    portfolio: [...state.portfolio]}\r\n            }\r\n            return {...state, currentAssetSessions: state.currentAssetSessions + action.asset.price,\r\n                percent: action.asset.price * 100 /  action.asset.price, portfolio: [...state.portfolio, action.asset]}\r\n        case 'PORTFOLIO/UPDATE-PERCENT':{\r\n            const currentAssetSession  = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price,0)\r\n            return {...state, currentAssetSessions: state.currentAssetSessions - action.asset.price , percent: action.asset.price * 100 /  currentAssetSession}\r\n        }\r\n        case 'PORTFOLIO/REMOVE-ASSET':\r\n            return {...state, portfolio: state.portfolio.map((element) => {\r\n                    if (element.assetId === action.asset.assetId){\r\n                        return {...element, count: element.count - action.asset.count, price: element.price - action.asset.price}\r\n                    }\r\n                    return element\r\n                })\r\n\r\n            }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const addAsset = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/ADD-ASSET', asset} as const\r\n}\r\nexport const updateCurrAssetPercent = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/UPDATE-PERCENT', asset} as const\r\n}\r\nexport const setAssets = (assets: AddAssetType[]) => {\r\n    return {type: 'PORTFOLIO/SET-ASSETS', assets} as const\r\n}\r\nexport const removeAssetPortfolio = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/REMOVE-ASSET', asset} as const\r\n}\r\n\r\n\r\n//types\r\nexport type PortfolioInitType = typeof initialState\r\n\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Assets.scss'\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { ModalForAssets } from '../ModalForAssets/ModalForAssets';\r\nimport { addAsset } from '../../../Bll/Portfolio-reducer';\r\n\r\n\r\ntype AssetsType = {\r\n    item: CryptocurrencyListType\r\n}\r\nexport const Assets = React.memo(({item}: AssetsType) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const openMoreInfo = (id: string) => {\r\n        return history.push(`/currency-info/${id}`)\r\n    }\r\n    const addAssetsHandler = (assetsCount: number) => {\r\n        const newAccount = {\r\n            assetId: item.id,\r\n            count: assetsCount,\r\n            price: Number(item.priceUsd) * assetsCount\r\n        }\r\n        dispatch(addAsset(newAccount))\r\n        setShowModal(!showModal)\r\n    }\r\n    const openModalPortfoliolHandler = () => {\r\n        setShowModal(true)\r\n    }\r\n\r\n    return (<div className=\"main__body\">\r\n            {showModal && <ModalForAssets assets={item} addAssetsHandler={addAssetsHandler} showModal={setShowModal}/>}\r\n            <div className=\"main__body__block\">\r\n                <p>{item.rank}</p>\r\n                <p>{item.name}</p>\r\n                <p>${(+item.priceUsd).toFixed(2)}</p>\r\n                <Button className=\"block_btn\" onClick={() => openMoreInfo(item.id)} variant=\"outline-primary\">More\r\n                    info</Button>\r\n                <Button className=\"block_btn\" onClick={openModalPortfoliolHandler} variant=\"outline-primary\">Buy\r\n                    currency</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import axios from 'axios';\r\nimport { AssetsType, DataHistoryAssetsType } from './Types';\r\n\r\nconst createInstance = axios.create({\r\n    baseURL: 'https://api.coincap.io/v2/',\r\n\r\n})\r\n\r\nexport const api = {\r\n    getAssets() {\r\n        return createInstance.get<AssetsType>('assets')\r\n    },\r\n    getChartData(id:string){\r\n        return createInstance.get<DataHistoryAssetsType>(`assets/${id}/history`, { params: { interval: 'd1' } })\r\n    },\r\n    topAssets(){\r\n        return createInstance.get<AssetsType>('https://api.coincap.io/v2/assets?limit=3')\r\n    }\r\n}\r\n\r\n","import { ActionsTypes } from '../Store/Store';\r\n\r\n\r\n\r\nconst initialState  = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\nexport const appReducer = (state = initialState , action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-APP-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setAppStatus = (status:RequestStatusType) => {\r\n  return {type: 'APP/SET-APP-STATUS', status} as const\r\n}\r\nexport const setAppError = (error:string | null) => {\r\n    return {type: 'APP/SET-APP-ERROR', error} as const\r\n}\r\n\r\nexport type RequestStatusType = 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = typeof initialState","import { api } from '../Dal/Api';\r\nimport { CryptocurrencyListType, DataChartType } from '../Dal/Types';\r\nimport { ActionsTypes, AppDispatchType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\n\r\nconst initialState = {\r\n    dataAssets: [] as CryptocurrencyListType[],\r\n    timestamp: null as number | null,\r\n    chartData: [] as DataChartType[],\r\n    topAssets: [] as CryptocurrencyListType[]\r\n}\r\n\r\nexport const cryptocurrencyReducer = (state = initialState, action: ActionsTypes): CryptocurrencyInitType => {\r\n    switch (action.type) {\r\n        case 'CRYPT/SET-CURRENT-ASSETS':\r\n            return {...state, dataAssets: action.data, timestamp: action.timestamp}\r\n        case 'CRYPT/SET-DATA-CHART':\r\n            return {...state, chartData: action.data}\r\n        case  'CRYPT/SET-TOP-DATA-ASSETS':\r\n            return {...state, topAssets: action.data}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//action\r\nexport const setDataAssets = (data: CryptocurrencyListType[], timestamp: number) => {\r\n    return {type: 'CRYPT/SET-CURRENT-ASSETS', data, timestamp} as const\r\n}\r\nexport const setDataChart = (data: DataChartType[]) => {\r\n    return {type: 'CRYPT/SET-DATA-CHART', data} as const\r\n}\r\nexport const setTopDataAssets = (data:  CryptocurrencyListType[]) => {\r\n    return {type: 'CRYPT/SET-TOP-DATA-ASSETS', data} as const\r\n}\r\n//thunk\r\nexport const getDataAssetsTC = ()=> (dispatch:AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    api.getAssets()\r\n        .then((res) => {\r\n            const {data, timestamp} = res.data\r\n            dispatch(setDataAssets(data, timestamp))\r\n            dispatch(setAppStatus('succeeded'))\r\n        }).catch((error) => {\r\n        dispatch(setAppStatus('failed'))\r\n    })\r\n}\r\nexport const getDataTopAssetsTC = ()=> (dispatch:AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    api.topAssets()\r\n        .then((res) => {\r\n            const {data} = res.data\r\n            dispatch(setTopDataAssets(data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        }).catch((error) => {\r\n        dispatch(setAppStatus('failed'))\r\n    })\r\n}\r\nexport const getChartDataTC = (id:string)=> (dispatch:AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    api.getChartData(id)\r\n        .then((res) => {\r\n            const {data} = res.data\r\n            dispatch(setDataChart(data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        }).catch((error) => {\r\n        dispatch(setAppStatus('failed'))\r\n    })\r\n}\r\n\r\n//types\r\nexport type CryptocurrencyInitType = typeof initialState\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './Preloader.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\" >\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport './Paginator.scss'\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n    onPageChange: (page: number) => void\r\n\r\n}\r\nexport const Paginator = (props: PaginatorType) => {\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div className=\"paginator\">\r\n        {\r\n            pages\r\n                .map(page => {\r\n                    return <span\r\n                        className={props.currentPage === page ? 'paginator__selected' : 'paginator__unselected'}\r\n                        key={page}\r\n                        onClick={() => props.onPageChange(page)}>\r\n                       {page}\r\n                   </span>\r\n                })}\r\n    </div>\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport './AlertError.scss'\r\n\r\ntype AlertErrorType = {\r\n\r\n}\r\nexport const AlertError = (props:AlertErrorType ) => {\r\n    const [show, setShow] = useState(true);\r\n    const closeAlert = () => {\r\n        setShow(false)\r\n    }\r\n /*   useEffect(() => {\r\n        setTimeout(()=> {\r\n            closeAlert()\r\n        }, 3000)\r\n    },[])*/\r\n    return (\r\n        <>\r\n                    <Alert className=\"alert\" show={show} variant=\"primary\">\r\n                        <Alert.Heading>Server error, please repeat later</Alert.Heading>\r\n                        <Button onClick={closeAlert} variant=\"outline-primary\">\r\n                            Close Alert!\r\n                        </Button>\r\n                    </Alert>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Table.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Assets } from './Asset/Assets';\r\nimport { getDataAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { Paginator } from '../Common/Paginator/Paginator';\r\nimport { AlertError } from '../Common/AlertError/AlertError';\r\n\r\nexport const Table = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataAssetsTC())\r\n    }, [dispatch])\r\n\r\n    const dataAssets = useSelector<AppStateType, CryptocurrencyListType[]>\r\n    ((state) => state.cryptocurrencyList.dataAssets)\r\n    const [currentPage, setCurrentPages] = useState(1)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n\r\n\r\n    const totalCount = dataAssets.length\r\n    const onPageChange = (page: number) => {\r\n        setCurrentPages(page)\r\n    }\r\n    const pageSize = 10\r\n    const lastCurrentsPage = currentPage * pageSize\r\n    const firstCurrentPage = lastCurrentsPage - pageSize\r\n    const currentElements = dataAssets.slice(firstCurrentPage, lastCurrentsPage)\r\n\r\n    return <div className=\"main\">\r\n        <Paginator onPageChange={onPageChange} totalCount={totalCount} pageSize={pageSize}\r\n                   currentPage={currentPage}/>\r\n        {status === 'failed' && <AlertError/>}\r\n        <div className=\"main__header\">\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Price</p>\r\n        </div>\r\n        {\r\n            status === 'loading' ? <Preloader/> : currentElements.map((i) => {\r\n                return <Assets key={i.id} item={i}/>\r\n            })\r\n        }\r\n    </div>\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Header.scss'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { PortfolioInitType } from '../../Bll/Portfolio-reducer';\r\nimport { getDataTopAssetsTC } from '../../Bll/Crypt-coin-list-reducer';\r\n\r\n\r\nexport const Header = () => {\r\n    const topAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.topAssets)\r\n    const {\r\n        portfolio,\r\n        percent,\r\n        currentAssetSessions\r\n    } = useSelector<AppStateType, PortfolioInitType>(state => state.portfolio)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getDataTopAssetsTC())\r\n    }, [dispatch])\r\n    const portfolioAmount = portfolio && portfolio.reduce((acc, curr) =>\r\n        acc + Number(curr.price), 0).toFixed(2)\r\n\r\n    return <div className=\"header\">\r\n        {topAssets.map((topAssets) => {\r\n            return <div className=\"header__assets\" key={topAssets.id}>\r\n                <p className=\"header__assets-text\">{topAssets.name}</p>\r\n                <p className=\"header__assets-text\">${(+topAssets.priceUsd).toFixed(2)}</p>\r\n            </div>\r\n        })}\r\n        <div className=\"header__totalCounts\">\r\n            <p className=\"header__totalCounts-text\">Wallet:{portfolioAmount}USD</p>\r\n            <p className=\"header__totalCounts-text\">Session:{(currentAssetSessions).toFixed(2)}USD</p>\r\n            <p className=\"header__totalCounts-text\">{percent !== Infinity && percent.toFixed(2)}% </p>\r\n        </div>\r\n\r\n        <NavLink className=\"header__link\" to={'/portfolio'}> My Portfolio</NavLink>\r\n    </div>\r\n}","import { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { removeAssetPortfolio, updateCurrAssetPercent } from '../../../Bll/Portfolio-reducer';\r\nimport { AddAssetType, CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './Wallet.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\n\r\ntype WalletType = {\r\n    asset: AddAssetType\r\n    currentAssets:AddAssetType[]\r\n}\r\nexport const Wallet = ({asset,currentAssets}: WalletType) => {\r\n    const [countDelete, setCountDelete] = useState<string>('')\r\n    const [changeAsset, setChangeAsset] = useState<boolean>(false)\r\n    const valueAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.dataAssets)\r\n    const dispatch = useDispatch()\r\n    const removeCountAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > -1){\r\n            setCountDelete(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    const removeAssetHandler = (assetId: string) => {\r\n        const count = currentAssets.find(count => count.assetId === assetId)\r\n        const assetValue = valueAssets.find((value) => {\r\n            if (value.id === assetId ){\r\n               return value.priceUsd\r\n            }\r\n        })\r\n        if (count && assetValue) {\r\n            const assetRemove = {\r\n                assetId:assetId,\r\n                count:Number(countDelete),\r\n                price: Number(assetValue.priceUsd) * Number(countDelete)\r\n            }\r\n            if (asset.count < assetRemove.count) return\r\n            dispatch(updateCurrAssetPercent(assetRemove))\r\n            dispatch(removeAssetPortfolio(assetRemove))\r\n\r\n        }\r\n        setChangeAsset(false)\r\n    }\r\n\r\n    const changeAssetHandler = () => setChangeAsset(!changeAsset)\r\n\r\n    return <div className=\"wallet\">\r\n        <Button  onClick={changeAssetHandler} variant=\"primary\">Change {asset.assetId}</Button>\r\n        {changeAsset ? <InputGroup  className=\"mb-3\">\r\n                <InputGroup.Text>{asset.assetId}</InputGroup.Text>\r\n                <InputGroup.Text>{asset.count}</InputGroup.Text>\r\n                <FormControl type=\"number\" value={countDelete} onChange={removeCountAssets}/>\r\n                <Button variant=\"primary\" onClick={() => removeAssetHandler(asset.assetId)}>delete</Button>\r\n            </InputGroup>\r\n            :\r\n            <div className=\"wallet__block\">\r\n                <span>{asset.assetId}</span>\r\n                <span>${(asset.price).toFixed(1)}</span>\r\n                <span>{asset.count}</span>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n}","import React from 'react';\r\nimport './Portfolio.scss'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { AddAssetType } from '../../Dal/Types';\r\nimport { Wallet } from './Wallet/Wallet';\r\n\r\nexport const Portfolio = () => {\r\n    const currentAssets = useSelector<AppStateType, AddAssetType[]>(state => state.portfolio.portfolio)\r\n    const history = useHistory();\r\n    const goBackHandler = () => history.goBack()\r\n\r\n    return <Modal show={true}>\r\n        <Modal.Header>\r\n            <Modal.Title>My Portfolio</Modal.Title>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            {currentAssets.filter(asset => asset.count !== 0).map((asset) => {\r\n                return <Wallet currentAssets={currentAssets} key={asset.assetId} asset={asset}/>\r\n            })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n\r\n        </Modal.Footer>\r\n    </Modal>\r\n}\r\n","import React from 'react';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport './Chart.scss';\r\nimport { DataChartType } from '../../../Dal/Types';\r\n\r\n\r\nexport type ChartsType = {\r\n    data: DataChartType[]\r\n}\r\nexport const Charts = ({data}: ChartsType) => {\r\n    const options = {\r\n        series: [{\r\n            type: 'area',\r\n            data: data && data.map(item => +item.priceUsd)\r\n        }]\r\n    }\r\n    return (<HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}/>\r\n    );\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './CurrencyInfo.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\nimport { Charts } from '../../Common/Chart/Chart';\r\nimport { CryptocurrencyInitType, getChartDataTC } from '../../../Bll/Crypt-coin-list-reducer';\r\n\r\n\r\nexport const CurrencyInfo = () => {\r\n    const {id} = useParams<{ id: string }>();\r\n    const data = useSelector<AppStateType, CryptocurrencyInitType>(state => state.cryptocurrencyList)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n    const goBackHandler = () => {\r\n        history.goBack()\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getChartDataTC(id))\r\n    }, [dispatch, id])\r\n    return (\r\n        <div>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n            <table className=\"table table-hover table-sm\">\r\n                <thead>\r\n                <tr className=\"table-primary\">\r\n                    <th scope=\"col\">Rank</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Market Cap</th>\r\n                    <th scope=\"col\">VWAP(24Hr)</th>\r\n                    <th scope=\"col\">Supply</th>\r\n                    <th scope=\"col\">Volume(24Hr)</th>\r\n                    <th scope=\"col\">Change(24Hr)</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    data.dataAssets.filter(i => i.id === id).map((i) => {\r\n                        return <tr key={i.id}>\r\n                            <td scope=\"row\">{i.rank}</td>\r\n                            <td>{i.name}</td>\r\n                            <td>${(+i.priceUsd).toFixed(5)}</td>\r\n                            <td>${(+i.marketCapUsd).toFixed(5)}</td>\r\n                            <td>${(+i.vwap24Hr).toFixed(2)}</td>\r\n                            <td>{(+i.supply).toFixed(5)}B</td>\r\n                            <td>{(+i.volumeUsd24Hr).toFixed(5)}B</td>\r\n                            <td>{(+i.changePercent24Hr).toFixed(2)}%</td>\r\n                        </tr>\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <Charts data={data.chartData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table } from './Component/Table/Table';\nimport { Header } from './Component/Header/Header';\nimport { Portfolio } from './Component/Portfolio/Portfolio';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { CurrencyInfo } from './Component/Table/CurrencyInfo/CurrencyInfo';\n\n\nconst App = () => {\n\n    return (\n        <div className=\"container\">\n            <Header/>\n                <Route>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <Redirect to={'/table'}/>}/>\n                        <Route path={'/portfolio'} render={() => <Portfolio/>}/>\n                        <Route path={'/table'} render={() => <Table/>}/>\n                        <Route path={'/currency-info/:id'} render={() => <CurrencyInfo/>}/>\n                    </Switch>\n                </Route>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { Dispatch } from 'react';\r\nimport ThunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport { cryptocurrencyReducer, setDataAssets, setDataChart, setTopDataAssets } from '../Bll/Crypt-coin-list-reducer';\r\nimport {\r\n    addAsset,\r\n    portfolioReducer,\r\n    removeAssetPortfolio,\r\n    setAssets,\r\n    updateCurrAssetPercent\r\n} from '../Bll/Portfolio-reducer';\r\nimport { appReducer, setAppError, setAppStatus } from '../Bll/App-reducer';\r\nimport { loadState, saveState } from '../Component/Common/Utils/localstorage-utils';\r\n\r\nconst rootReducer = combineReducers({\r\n    cryptocurrencyList: cryptocurrencyReducer,\r\n    portfolio: portfolioReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(ThunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        ...store.getState(),\r\n        portfolio: store.getState().portfolio,\r\n    })\r\n})\r\n\r\n//type\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof setDataAssets>\r\n    | ReturnType<typeof setDataChart>\r\n    | ReturnType<typeof setTopDataAssets>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof addAsset>\r\n    | ReturnType<typeof removeAssetPortfolio>\r\n    | ReturnType<typeof setAssets>\r\n    | ReturnType<typeof updateCurrAssetPercent>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import { AppStateType } from '../../../Store/Store';\nimport { AddAssetType } from '../../../Dal/Types';\n\nconst checkingArrayAssets = (serializedState: string) => {\n    const parsedState: AppStateType = JSON.parse(serializedState);\n    const portfolio = parsedState.portfolio.portfolio.filter((asset: AddAssetType) => asset.count !== 0)\n    return {...parsedState, portfolio: {...parsedState.portfolio, portfolio: portfolio}}\n}\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('portfolioAssets');\n        if (serializedState === null) {\n            return undefined;\n        }\n\n        return checkingArrayAssets(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\nexport const saveState = (state: AppStateType) => {\n    try {\n        const stateCopy = {...state, portfolio: {...state.portfolio, percent: 0, currentAssetSessions: 0}}\n        const serializedState = JSON.stringify(stateCopy);\n        localStorage.setItem('portfolioAssets', serializedState);\n    } catch (error) {\n        return console.log(error)\n    }\n};\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/Store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <HashRouter>\n     <Provider store={store}>\n         <App />\n     </Provider>\n   </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}