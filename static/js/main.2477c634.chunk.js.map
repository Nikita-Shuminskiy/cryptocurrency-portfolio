{"version":3,"sources":["Component/Table/ModalForAssets/ModalForAssets.tsx","Bll/Portfolio-reducer.ts","Component/Table/Asset/Assets.tsx","Component/Common/Preloader/Preloader.tsx","Component/Common/AlertError/AlertError.tsx","Bll/App-reducer.ts","Dal/Api.ts","Bll/Crypt-coin-list-reducer.ts","Component/Common/Hooks/UsePagination.ts","Component/Common/Paginator/Paginator.tsx","Component/Table/Table.tsx","Component/Header/Header.tsx","Component/Portfolio/Wallet/ChangeWallet/ChangeWallet.tsx","Component/Portfolio/Wallet/Wallet.tsx","Component/Portfolio/Portfolio.tsx","Component/Table/CurrencyInfo/CurrenceDetails/CurrencyDetails.tsx","Component/Common/Chart/Chart.tsx","Component/Table/CurrencyInfo/CurrencyInfo.tsx","App.tsx","reportWebVitals.js","Store/Store.ts","Component/Common/Utils/localstorage-utils.ts","index.tsx"],"names":["ModalForAssets","assets","showModal","addAssetsHandler","useState","assetsCount","setAssetsCount","currentValueAsset","Number","priceUsd","toFixed","Modal","show","Header","Title","Button","onClick","variant","Body","name","InputGroup","className","FormControl","type","value","onChange","e","currentTarget","Text","Footer","initialState","portfolio","percent","currentAssetSessions","currentUserPage","Assets","React","memo","item","setShowModal","dispatch","useDispatch","history","useHistory","newAsset","assetId","id","count","price","asset","rank","push","Preloader","Spinner","animation","AlertError","error","setShow","Alert","Heading","status","setAppStatus","createInstance","axios","create","baseURL","api","get","limit","offset","params","interval","totalAssetData","dataAssetsPortion","timestamp","chartData","topAssets","setDataAssetsPortion","data","setTotalAssetData","setDataChart","usePagination","pageSize","dataAssetsLength","useSelector","state","cryptocurrencyList","length","pageCurrent","useEffect","a","response","onPageChange","page","currentPage","totalCount","Paginator","pageCount","Math","ceil","pages","i","map","Table","app","portfolioAmount","reduce","acc","curr","Infinity","to","ChangeWallet","setChangeAsset","countDelete","setCountDelete","assetValue","find","assetRemove","removeAssetHandler","Wallet","changeAsset","Portfolio","currentAssets","checkingCurrentAsset","filter","goBack","CurrencyDetails","marketCapUsd","vwap24Hr","supply","volumeUsd24Hr","changePercent24Hr","Charts","options","series","highcharts","Highcharts","CurrencyInfo","useParams","getChartDataTC","scope","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","slice","currentAssetSession","forEach","element","store","createStore","serializedState","localStorage","getItem","parsedState","JSON","parse","checkingArrayAssets","err","loadState","applyMiddleware","ThunkMiddleware","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"kZASaA,EAAiB,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,OAAOC,EAAmD,EAAnDA,UAAUC,EAAyC,EAAzCA,iBAC7C,EAAsCC,mBAAiB,IAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KAOMC,GAAqBC,OAAOP,EAAOQ,UAAYD,OAAOH,IAAcK,QAAQ,GAClF,OAAQ,eAACC,EAAA,EAAD,CAAOC,MAAM,EAAb,UACA,eAACD,EAAA,EAAME,OAAP,WACI,cAACF,EAAA,EAAMG,MAAP,+BACA,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMd,GAAU,IAAQe,QAAQ,UAAjD,sBAEJ,eAACN,EAAA,EAAMO,KAAP,WACI,sDACuB,iCAASjB,EAAOkB,OADvC,wBAGA,8BACI,eAACC,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACI,cAACC,EAAA,EAAD,CAAaC,KAAK,SAASC,MAAOnB,EAAaoB,SAlB5C,SAACC,IACfA,EAAEC,cAAcH,OAAS,GAC1BlB,EAAeoB,EAAEC,cAAcH,UAiBnB,eAACJ,EAAA,EAAWQ,KAAZ,eAAmBrB,aAI/B,cAACI,EAAA,EAAMkB,OAAP,UACI,cAACd,EAAA,EAAD,CAAQC,QAnBO,kBAAuB,KAAhBX,GAAqBF,EAAiBK,OAAOH,KAmB9BY,QAAQ,UAA7C,uB,eC/BVa,EAAe,CACjBC,UAAW,GACXC,QAAS,EACTC,qBAAsB,EACtBC,gBAAgB,GCKPC,EAASC,IAAMC,MAAK,YAAyB,IAAvBC,EAAsB,EAAtBA,KAC/B,EAAkClC,oBAAkB,GAApD,mBAAOF,EAAP,KAAkBqC,EAAlB,KACMC,EAAWC,cACXC,EAAUC,cAkBhB,OAAQ,sBAAKtB,UAAU,aAAf,UACCnB,GAAa,cAAC,EAAD,CAAgBD,OAAQqC,EAAMnC,iBAd3B,SAACE,GACtB,IAAMuC,EAAW,CACbC,QAASP,EAAKQ,GACdC,MAAO1C,EACP2C,MAAOxC,OAAO8B,EAAK7B,UAAYJ,GAEnCmC,EDyCG,CAACjB,KAAM,sBAAuB0B,MCzCfL,IAClBL,GAAcrC,IAOsEA,UAAWqC,IAC3F,sBAAKlB,UAAU,oBAAf,UACI,4BAAIiB,EAAKY,OACT,4BAAIZ,EAAKnB,OACT,oCAAOmB,EAAK7B,UAAUC,QAAQ,MAC9B,cAACK,EAAA,EAAD,CAAQM,UAAU,YAAYL,QAAS,kBAtB7B8B,EAsBgDR,EAAKQ,GArBhEJ,EAAQS,KAAR,yBAA+BL,IADrB,IAACA,GAsB0D7B,QAAQ,kBAA5E,uBAEA,cAACF,EAAA,EAAD,CAAQM,UAAU,YAAYL,QAZR,WAC9BuB,GAAa,IAW6DtB,QAAQ,kBAA1E,mC,SCtCHmC,G,MAAY,WACrB,OACI,qBAAK/B,UAAU,YAAf,SACI,cAACgC,EAAA,EAAD,CAASC,UAAU,SAASrC,QAAQ,gB,SCDnCsC,G,MAAa,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MACxB,EAAwBpD,oBAAS,GAAjC,mBAAOQ,EAAP,KAAa6C,EAAb,KAIA,OACI,mCACY,eAACC,EAAA,EAAD,CAAOrC,UAAU,QAAQT,KAAMA,EAAMK,QAAQ,UAA7C,UACI,cAACyC,EAAA,EAAMC,QAAP,UAAgBH,IAChB,cAACzC,EAAA,EAAD,CAAQC,QAPT,WACfyC,GAAQ,IAMqCxC,QAAQ,kBAArC,iC,iCCXlBa,EAAgB,CAClB8B,OAAQ,UACRJ,MAAO,MAaEK,EAAe,SAACD,GAC3B,MAAO,CAACrC,KAAM,qBAAsBqC,W,QCjBhCE,E,OAAiBC,EAAMC,OAAO,CAChCC,QAAS,+BAIAC,EAAM,WAEX,OAAOJ,EAAeK,IAAgB,WAFjCD,EAAM,SAIME,EAAeC,GAChC,OAAOP,EAAeK,IAAgB,SAAU,CAAEG,OAAQ,CAAEF,QAAOC,aAL9DH,EAAM,SAOGpB,GACd,OAAOgB,EAAeK,IAAf,iBAAoDrB,EAApD,YAAkE,CAAEwB,OAAQ,CAAEC,SAAU,SCXjGzC,EAAe,CACjB0C,eAAgB,GAChBC,kBAAmB,GACnBC,UAAW,KACXC,UAAW,GACXC,UAAW,IAmBFC,EAAuB,SAACC,GACjC,MAAO,CAACvD,KAAM,mCAAoCuD,SAEzCC,EAAoB,SAACP,EAA0CE,GACxE,MAAO,CAACnD,KAAM,yBAA0BiD,iBAAgBE,cAE/CM,EAAe,SAACF,GACzB,MAAO,CAACvD,KAAM,uBAAwBuD,SCrB7BG,EAAgB,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,SACtB1C,EAAWC,cAGX0C,EAAmBC,aAAkC,SAACC,GAAD,OAAWA,EAAMC,mBAAmBd,eAAee,UAGxGC,EAAcJ,aAAkC,SAAAC,GAAK,OAAIA,EAAMtD,UAAUG,mBAE/EuD,qBAAU,WACNjD,ED0B4B,uCAAM,WAAOA,GAAP,qBAAAkD,EAAA,6DACtClD,EAASqB,EAAa,YADgB,kBAGXK,IAHW,OAG5ByB,EAH4B,SAIRA,EAASb,KAA5BA,EAJ2B,EAI3BA,KAAMJ,EAJqB,EAIrBA,UACblC,EAASuC,EAAkBD,EAAMJ,IACjClC,EAASqB,EAAa,cANY,kDAQlCrB,EAASqB,EAAa,WARY,0DAAN,yDCzB7B,CAACrB,IAEJiD,qBAAU,WDYwB,IAACrB,EAAeC,ECX9C7B,GDW+B4B,ECXCc,EDWcb,GCXHmB,EAAc,GAAKN,EDWhC,uCAAmC,WAAO1C,GAAP,iBAAAkD,EAAA,6DACrElD,EAASqB,EAAa,YAD+C,kBAG1CK,EAAyBE,EAAOC,GAHU,OAG3DsB,EAH2D,OAI1Db,EAAQa,EAASb,KAAjBA,KACPtC,EAASqC,EAAqBC,IAC9BtC,EAASqB,EAAa,cAN2C,kDAQjErB,EAASqB,EAAa,WAR2C,0DAAnC,0DCV/B,CAACrB,EAAUgD,EAAaN,IAM3B,MAAO,CACHU,aAHiB,SAACC,GAAD,OAAkBrD,EP2ChC,CAACjB,KAAM,wBAA0BuE,YO3C+BD,KAInEE,WAAYZ,EACZK,gBClCKQ,EAAY,WAKrB,IAJA,IACA,EAAiDf,EAAc,CAACC,SAD/C,KACTU,EAAR,EAAQA,aAAcG,EAAtB,EAAsBA,WAAYP,EAAlC,EAAkCA,YAC9BS,EAAYC,KAAKC,KAAKJ,EAFT,IAGXK,EAAQ,GACLC,EAAI,EAAGA,GAAKJ,EAAWI,IAC5BD,EAAMjD,KAAKkD,GAEf,OAAO,qBAAKhF,UAAU,YAAf,SAEC+E,EACKE,KAAI,SAAAT,GACD,OAAO,sBACHxE,UAAWmE,IAAgBK,EAAO,mBAAqB,qBAEvD7E,QAAS,kBAAM4E,EAAaC,IAHzB,SAIHA,GAFKA,SCRhBU,EAAQ,WACjB,IAAM3C,EAASwB,aAA6C,SAAAC,GAAK,OAAIA,EAAMmB,IAAI5C,UACzEY,EAAiBY,aAAoD,SAACC,GAAD,OAAWA,EAAMC,mBAAmBb,qBAE/G,OAAO,sBAAKpD,UAAU,OAAf,UACS,WAAXuC,GAAuB,cAAC,EAAD,CAAYJ,MAFxB,8CAGZ,sBAAKnC,UAAU,eAAf,UACI,mBAAGA,UAAU,oBAAb,kBACA,mBAAGA,UAAU,oBAAb,kBACA,mBAAGA,UAAU,oBAAb,sBAGW,YAAXuC,EAAuB,cAAC,EAAD,IAEnBY,EAAe8B,KAAI,SAACrD,GAChB,OAAO,cAAC,EAAD,CAAuBX,KAAMW,GAAhBA,EAAMH,OAGrC,cAAC,EAAD,QClBIjC,G,OAAS,WACD4B,cAAjB,IACMmC,EAAYQ,aAAoD,SAAAC,GAAK,OAAIA,EAAMC,mBAAmBV,aAClGhB,EAASwB,aAA6C,SAAAC,GAAK,OAAKA,EAAMmB,IAAI5C,UAChF,EAIIwB,aAA6C,SAAAC,GAAK,OAAIA,EAAMtD,aAH5DA,EADJ,EACIA,UACAC,EAFJ,EAEIA,QACAC,EAHJ,EAGIA,qBAEEwE,EAAkB1E,GAAaA,EAAU2E,QAAO,SAACC,EAAKC,GAAN,OAClDD,EAAMnG,OAAOoG,EAAK5D,SAAQ,GAAGtC,QAAQ,GAEzC,OAAO,sBAAKW,UAAU,SAAf,UACS,YAAXuC,GAAwB,cAAC,EAAD,IACxBgB,EAAU0B,KAAI,SAAC1B,GACZ,OAAQ,sBAAKvD,UAAU,iBAAf,UACJ,mBAAGA,UAAU,sBAAb,SAAoCuD,EAAUzD,OAC9C,oBAAGE,UAAU,sBAAb,gBAAuCuD,EAAUnE,UAAUC,QAAQ,QAF1BkE,EAAU9B,OAK3D,sBAAKzB,UAAU,sBAAf,UACI,oBAAGA,UAAU,2BAAb,oBAAgDoF,EAAhD,SACA,oBAAGpF,UAAU,2BAAb,qBAAkDY,EAAsBvB,QAAQ,GAAhF,SACA,oBAAGW,UAAU,2BAAb,UAAyCW,IAAY6E,KAAY7E,EAAQtB,QAAQ,GAAjF,WAEJ,cAAC,IAAD,CAASW,UAAU,eAAeyF,GAAI,aAAtC,gCCxBKC,G,cAAe3E,IAAMC,MAAK,YAAyD,IAAvDQ,EAAsD,EAAtDA,QAASE,EAA6C,EAA7CA,MAAOiE,EAAsC,EAAtCA,eAC/CxC,EAAiBY,aAAoD,SAAAC,GAAK,OAAIA,EAAMC,mBAAmBd,kBACvGhC,EAAWC,cACjB,EAAsCrC,mBAAiB,IAAvD,mBAAO6G,EAAP,KAAoBC,EAApB,KAsBA,OAAO,eAAC9F,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACH,cAACD,EAAA,EAAWQ,KAAZ,UAAkBiB,IAClB,cAACzB,EAAA,EAAWQ,KAAZ,UAAkBmB,IAClB,cAACzB,EAAA,EAAD,CAAaC,KAAK,SAASC,MAAOyF,EAAaxF,SAxBzB,SAACC,IAClBA,EAAEC,cAAcH,OAAS,GAC1B0F,EAAexF,EAAEC,cAAcH,UAuBnC,cAACT,EAAA,EAAD,CAAQE,QAAQ,UAAUD,QAAS,kBApBZ,SAAC6B,GAExB,IAAMsE,EAAa3C,EAAe4C,MAAK,SAAC5F,GAAD,OAAWA,EAAMsB,KAAOD,GAAWrB,EAAMf,YAChF,GAAI0G,EAAY,CACZ,IAAME,EAAc,CAChBxE,QAASA,EACTE,MAAOvC,OAAOyG,GACdjE,MAAOxC,OAAO2G,EAAW1G,UAAYD,OAAOyG,IAEhD,GAAIlE,EAAQsE,EAAYtE,MAAO,OAC/BP,EXwCD,CAACjB,KAAM,2BAA4B0B,MWxCFoE,IAChC7E,EXgDD,CAACjB,KAAM,yBAA0B0B,MWhDFoE,IAElCL,GAAe,GAO0BM,CAAmBzE,IAA5D,yBC9BK0E,EAASnF,IAAMC,MAAK,YAA0B,IAAxBY,EAAuB,EAAvBA,MAC/B,EAAsC7C,oBAAkB,GAAxD,mBAAOoH,EAAP,KAAoBR,EAApB,KAGA,OAAO,sBAAK3F,UAAU,SAAf,UACH,eAACN,EAAA,EAAD,CAAQC,QAHe,kBAAMgG,GAAgBQ,IAGRvG,QAAQ,UAA7C,oBAA+DgC,EAAMJ,WACpE2E,EAAc,cAACT,EAAD,CAAclE,QAASI,EAAMJ,QAASE,MAAOE,EAAMF,MAAOiE,eAAgBA,IAErF,sBAAK3F,UAAU,gBAAf,UACI,+BAAO4B,EAAMJ,UACb,qCAASI,EAAMD,MAAOtC,QAAQ,MAC9B,+BAAOuC,EAAMF,iBCZhB0E,EAAY,WACrB,IAAMC,EAAgBtC,aAA0C,SAAAC,GAAK,OAAIA,EAAMtD,UAAUA,aACnFW,EAAUC,cAEVgF,EAAuBD,EAAcE,QAAO,SAAA3E,GAAK,OAAoB,IAAhBA,EAAMF,SAEjE,OAAO,eAACpC,EAAA,EAAD,CAAOC,MAAM,EAAb,UACH,eAACD,EAAA,EAAME,OAAP,WACI,cAACF,EAAA,EAAMG,MAAP,2BACA,wBAAQE,QANM,kBAAM0B,EAAQmF,UAMItG,KAAK,SAASF,UAAU,0BAAxD,wBAEJ,eAACV,EAAA,EAAMO,KAAP,YACMyG,EAAqBpC,QAAU,uDAChCoC,EAAqBrB,KAAI,SAACrD,GACvB,OAAO,cAAC,EAAD,CAA4BA,MAAOA,GAAtBA,EAAMJ,eAGlC,cAAClC,EAAA,EAAMkB,OAAP,QCnBKiG,EAAkB1F,IAAMC,MAAM,YAAkC,IAAhCY,EAA+B,EAA/BA,MAEzC,OAAO,+BACH,6BAAKA,EAAMC,OACX,6BAAKD,EAAM9B,OACX,qCAAQ8B,EAAMxC,UAAUC,QAAQ,MAChC,qCAAQuC,EAAM8E,cAAcrH,QAAQ,MACpC,qCAAQuC,EAAM+E,UAAUtH,QAAQ,MAChC,iCAAOuC,EAAMgF,QAAQvH,QAAQ,GAA7B,OACA,iCAAOuC,EAAMiF,eAAexH,QAAQ,GAApC,OACA,iCAAOuC,EAAMkF,mBAAmBzH,QAAQ,GAAxC,SARYuC,EAAMH,O,kCCCbsF,G,OAAS,SAAC,GAAwB,IAAvBtD,EAAsB,EAAtBA,KACduD,EAAU,CACZC,OAAQ,CAAC,CACL/G,KAAM,OACNuD,KAAMA,GAAQA,EAAKwB,KAAI,SAAAhE,GAAI,OAAKA,EAAK7B,eAG7C,OAAO,mCACH,cAAC,IAAD,CAAiB8H,WAAYC,EAAYH,QAASA,QCR7CI,EAAe,WACxB,IAAO3F,EAAM4F,cAAN5F,GACDJ,EAAUC,cACVH,EAAWC,cACjBgD,qBAAU,WACNjD,EV8CsB,SAACM,GAAD,8CAAgB,WAAON,GAAP,iBAAAkD,EAAA,6DAC1ClD,EAASqB,EAAa,YADoB,kBAGfK,EAAsBpB,GAHP,OAGhC6C,EAHgC,OAI/Bb,EAAQa,EAASb,KAAjBA,KACPtC,EAASwC,EAAaF,IACtBtC,EAASqB,EAAa,cANgB,kDAQtCrB,EAASqB,EAAa,WARgB,0DAAhB,sDU9Cb8E,CAAe7F,MACzB,CAACN,EAAUM,IACd,MAAoCsC,aAAkD,SAAAC,GAAK,OAAIA,EAAMC,sBAA9Fd,EAAP,EAAOA,eAAgBG,EAAvB,EAAuBA,UAIvB,OACI,gCACI,wBAAQ3D,QAJM,kBAAM0B,EAAQmF,UAIItG,KAAK,SAASF,UAAU,0BAAxD,qBACA,wBAAOA,UAAU,6BAAjB,UACI,gCACA,qBAAIA,UAAU,gBAAd,UACI,oBAAIuH,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,+BAGJ,gCAEIpE,EACKoD,QAAO,SAAA3E,GAAK,OAAIA,EAAMH,KAAOA,KAC7BwD,KAAI,SAACrD,GACN,OAAO,cAAC6E,EAAD,CAAiB7E,MAAOA,GAAYA,EAAMH,YAK7D,cAAC,EAAD,CAAQgC,KAAMH,QCtBXkE,EAhBH,WACR,OACI,sBAAKxH,UAAU,YAAf,UACI,cAAC,EAAD,IACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOyH,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,IAAD,CAAUlC,GAAI,cACpD,cAAC,IAAD,CAAOiC,KAAM,aAAcC,OAAQ,kBAAM,cAAC,EAAD,OACzC,cAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOD,KAAM,qBAAsBC,OAAQ,kBAAM,cAAC,EAAD,gBCP1DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCaRQ,GAAcC,aAAgB,CAChCrE,mBbNiC,WAAyE,IAAxED,EAAuE,uDAA/DvD,EAAc8H,EAAiD,uCACzG,OAAQA,EAAOrI,MACX,IAAK,mCACD,OAAO,2BAAI8D,GAAX,IAAkBZ,kBAAmBmF,EAAO9E,OAChD,IAAK,uBACD,OAAO,2BAAIO,GAAX,IAAkBV,UAAWiF,EAAO9E,OACxC,IAAK,yBACD,OAAO,2BAAIO,GAAX,IAAkBb,eAAgBoF,EAAOpF,eAAgBE,UAAWkF,EAAOlF,UAAWE,UAAWgF,EAAOpF,eAAeqF,MAAM,EAAE,KACnI,QACI,OAAOxE,IaFftD,UnBX4B,WAAoE,IAAnEsD,EAAkE,uDAA1DvD,EAAc8H,EAA4C,uCAC/F,OAAQA,EAAOrI,MACX,IAAK,uBACD,OAAO,2BAAI8D,GAAX,IAAkBtD,UAAU,GAAD,mBAAMsD,EAAMtD,WAAZ,YAA0B6H,EAAO3J,WAChE,IAAK,sBACD,IAAM6J,EAAsBzE,EAAMtD,UAAU2E,QAAO,SAACC,EAAKC,GAAN,OAC/CD,EAAMC,EAAK5D,QAAO,GAChBC,EAAQoC,EAAMtD,UAAUqF,MAAK,SAAA9E,GAAI,OAAIA,EAAKO,UAAY+G,EAAO3G,MAAMJ,WACzE,OAAII,GACAoC,EAAMtD,UAAUgI,SAAQ,SAAAzH,GAChBA,EAAKO,UAAY+G,EAAO3G,MAAMJ,UAC9BP,EAAKS,MAAQT,EAAKS,MAAQ6G,EAAO3G,MAAMF,MACvCT,EAAKU,MAAQV,EAAKU,MAAQ4G,EAAO3G,MAAMD,UAGxC,2BACAqC,GADP,IACcpD,qBAAsBoD,EAAMpD,qBAAuB6H,EAC7D9H,QAA8B,IAArB4H,EAAO3G,MAAMD,MAAc8G,EACpC/H,UAAU,YAAKsD,EAAMtD,cAGtB,2BACAsD,GADP,IAEIpD,qBAAsBoD,EAAMpD,qBAAuB2H,EAAO3G,MAAMD,MAChEhB,QAA8B,IAArB4H,EAAO3G,MAAMD,MAAc4G,EAAO3G,MAAMD,MACjDjB,UAAU,GAAD,mBAAMsD,EAAMtD,WAAZ,CAAuB6H,EAAO3G,UAE/C,IAAK,2BACD,IAAM6G,EAAsBzE,EAAMtD,UAAU2E,QAAO,SAACC,EAAKC,GAAN,OAC/CD,EAAMC,EAAK5D,QAAO,GACtB,OAAO,2BACAqC,GADP,IACcpD,qBAAsBoD,EAAMpD,qBAAuB2H,EAAO3G,MAAMD,MAC1EhB,QAA8B,IAArB4H,EAAO3G,MAAMD,MAAc8G,IAG5C,IAAK,yBACD,OAAO,2BACAzE,GADP,IACctD,UAAWsD,EAAMtD,UAAUuE,KAAI,SAAC0D,GACtC,OAAIA,EAAQnH,UAAY+G,EAAO3G,MAAMJ,QAC1B,2BACAmH,GADP,IACgBjH,MAAOiH,EAAQjH,MAAQ6G,EAAO3G,MAAMF,MAChDC,MAAOgH,EAAQhH,MAAQ4G,EAAO3G,MAAMD,QAGrCgH,OAGnB,IAAK,wBACD,OAAO,2BAAI3E,GAAX,IAAkBnD,gBAAiB0H,EAAO9D,cAC9C,QACI,OAAOT,ImBtCfmB,IffsB,WAAoE,IAAnEnB,EAAkE,uDAA1DvD,EAAe8H,EAA2C,uCACzF,OAAQA,EAAOrI,MACX,IAAK,qBACD,OAAO,2BAAI8D,GAAX,IAAkBzB,OAAQgG,EAAOhG,SACrC,IAAK,oBACD,OAAO,2BAAIyB,GAAX,IAAkB7B,MAAOoG,EAAOpG,QACpC,QACI,OAAO6B,MeWN4E,GAAQC,aAAYR,GCjBR,WACrB,IACI,IAAMS,EAAkBC,aAAaC,QAAQ,mBAC7C,GAAwB,OAApBF,EACA,OAGJ,OAboB,SAACA,GACzB,IAAMG,EAA4BC,KAAKC,MAAML,GACvCpI,EAAYuI,EAAYvI,UAAUA,UAAU6F,QAAO,SAAC3E,GAAD,OAAyC,IAAhBA,EAAMF,SACxF,OAAO,2BAAIuH,GAAX,IAAwBvI,UAAU,2BAAKuI,EAAYvI,WAAlB,IAA6BA,UAAWA,EAAWC,QAAS,EAAGC,qBAAsB,MAU3GwI,CAAoBN,GAC7B,MAAOO,GACL,QDQsCC,GAAaC,aAAgBC,OAE3EZ,GAAMa,WAAU,YCNS,SAACzF,GACtB,IACI,IAAM8E,EAAkBI,KAAKQ,UAAU1F,GACvC+E,aAAaY,QAAQ,kBAAmBb,GAC1C,MAAO3G,GACL,QDEJyH,CAAU,2BACHhB,GAAMiB,YADJ,IAELnJ,UAAWkI,GAAMiB,WAAWnJ,gBAwBpCoJ,OAAOlB,MAAQA,GE9CfmB,IAASpC,OACP,cAAC,IAAMqC,WAAP,UACC,cAAC,IAAD,UACE,cAAC,IAAD,CAAUpB,MAAOA,GAAjB,SACI,cAAC,EAAD,UAIPqB,SAASC,eAAe,SAE1BtC,K","file":"static/js/main.2477c634.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, FormControl, InputGroup, Modal } from 'react-bootstrap';\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\n\r\ntype ModalForAssetsType = {\r\n    assets: CryptocurrencyListType\r\n    showModal: (show: boolean) => void\r\n    addAssetsHandler: (countAssets: number) => void\r\n}\r\nexport const ModalForAssets = ({assets,showModal,addAssetsHandler}:ModalForAssetsType) => {\r\n    const [assetsCount, setAssetsCount] = useState<string>('')\r\n    const onChangeAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > -1) {\r\n            setAssetsCount(e.currentTarget.value)\r\n        }\r\n    }\r\n    const onAddAssetsHandler = () => +assetsCount !== 0 && addAssetsHandler(Number(assetsCount))\r\n    const currentValueAsset = (Number(assets.priceUsd) * Number(assetsCount)).toFixed(2)\r\n    return (<Modal show={true}>\r\n            <Modal.Header>\r\n                <Modal.Title>Add to portfolio</Modal.Title>\r\n                <Button onClick={() => showModal(false)} variant=\"primary\">close</Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>\r\n                    Do you want to add <strong>{assets.name}</strong> to your portfolio\r\n                </div>\r\n                <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl type=\"number\" value={assetsCount} onChange={onChangeAssets}/>\r\n                        <InputGroup.Text>${currentValueAsset}</InputGroup.Text>\r\n                    </InputGroup>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={onAddAssetsHandler} variant=\"primary\">\r\n                    Add\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n","import { AddAssetType } from '../Dal/Types';\r\nimport { ActionsTypes } from '../Store/Store';\r\n\r\n\r\nconst initialState = {\r\n    portfolio: [] as AddAssetType[],\r\n    percent: 0,\r\n    currentAssetSessions: 0,\r\n    currentUserPage:1\r\n}\r\n\r\nexport const portfolioReducer = (state = initialState, action: ActionsTypes): PortfolioInitType => {\r\n    switch (action.type) {\r\n        case 'PORTFOLIO/SET-ASSETS':\r\n            return {...state, portfolio: [...state.portfolio, ...action.assets]}\r\n        case 'PORTFOLIO/ADD-ASSET':\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            const asset = state.portfolio.find(item => item.assetId === action.asset.assetId)\r\n            if (asset) {\r\n                state.portfolio.forEach(item => {\r\n                    if (item.assetId === action.asset.assetId) {\r\n                        item.count = item.count + action.asset.count\r\n                        item.price = item.price + action.asset.price\r\n                    }\r\n                })\r\n                return {\r\n                    ...state, currentAssetSessions: state.currentAssetSessions + currentAssetSession,\r\n                    percent: action.asset.price * 100 / currentAssetSession,\r\n                    portfolio: [...state.portfolio]\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                currentAssetSessions: state.currentAssetSessions + action.asset.price,\r\n                percent: action.asset.price * 100 / action.asset.price,\r\n                portfolio: [...state.portfolio, action.asset]\r\n            }\r\n        case 'PORTFOLIO/UPDATE-PERCENT': {\r\n            const currentAssetSession = state.portfolio.reduce((acc, curr) =>\r\n                acc + curr.price, 0)\r\n            return {\r\n                ...state, currentAssetSessions: state.currentAssetSessions - action.asset.price,\r\n                percent: action.asset.price * 100 / currentAssetSession\r\n            }\r\n        }\r\n        case 'PORTFOLIO/REMOVE-ASSET':\r\n            return {\r\n                ...state, portfolio: state.portfolio.map((element) => {\r\n                    if (element.assetId === action.asset.assetId) {\r\n                        return {\r\n                            ...element, count: element.count - action.asset.count,\r\n                            price: element.price - action.asset.price\r\n                        }\r\n                    }\r\n                    return element\r\n                })\r\n            }\r\n        case 'PORTFOLIO/CHANGE-PAGE':\r\n            return {...state, currentUserPage: action.currentPage}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//action\r\nexport const addAsset = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/ADD-ASSET', asset} as const\r\n}\r\nexport const updateCurrAssetPercent = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/UPDATE-PERCENT', asset} as const\r\n}\r\nexport const setAssets = (assets: AddAssetType[]) => {\r\n    return {type: 'PORTFOLIO/SET-ASSETS', assets} as const\r\n}\r\nexport const changeUsersCurrentPage = (currentPage: number) => {\r\n    return {type: 'PORTFOLIO/CHANGE-PAGE',  currentPage} as const\r\n}\r\nexport const removeAssetPortfolio = (asset: AddAssetType) => {\r\n    return {type: 'PORTFOLIO/REMOVE-ASSET', asset} as const\r\n}\r\n\r\n//types\r\nexport type PortfolioInitType = typeof initialState\r\n\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Assets.scss'\r\nimport { CryptocurrencyListType } from '../../../Dal/Types';\r\nimport { ModalForAssets } from '../ModalForAssets/ModalForAssets';\r\nimport { addAsset } from '../../../Bll/Portfolio-reducer';\r\n\r\n\r\ntype AssetsType = {\r\n    item: CryptocurrencyListType\r\n}\r\nexport const Assets = React.memo(({item}: AssetsType) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const openMoreInfo = (id: string) => {\r\n        return history.push(`/currency-info/${id}`)\r\n    }\r\n    const addAssetsHandler = (assetsCount: number) => {\r\n        const newAsset = {\r\n            assetId: item.id,\r\n            count: assetsCount,\r\n            price: Number(item.priceUsd) * assetsCount\r\n        }\r\n        dispatch(addAsset(newAsset))\r\n        setShowModal(!showModal)\r\n    }\r\n    const openModalPortfolioHandler = () => {\r\n        setShowModal(true)\r\n    }\r\n\r\n    return (<div className=\"main__body\">\r\n            {showModal && <ModalForAssets assets={item} addAssetsHandler={addAssetsHandler} showModal={setShowModal}/>}\r\n            <div className=\"main__body__block\">\r\n                <p>{item.rank}</p>\r\n                <p>{item.name}</p>\r\n                <p>${(+item.priceUsd).toFixed(2)}</p>\r\n                <Button className=\"block_btn\" onClick={() => openMoreInfo(item.id)} variant=\"outline-primary\">More\r\n                    info</Button>\r\n                <Button className=\"block_btn\" onClick={openModalPortfolioHandler} variant=\"outline-primary\">Buy\r\n                    currency</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './Preloader.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\" >\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport './AlertError.scss'\r\ntype AlertErrorType = {\r\n    error?:string\r\n}\r\nexport const AlertError = ({error}: AlertErrorType) => {\r\n    const [show, setShow] = useState(true);\r\n    const closeAlert = () => {\r\n        setShow(false)\r\n    }\r\n    return (\r\n        <>\r\n                    <Alert className=\"alert\" show={show} variant=\"primary\">\r\n                        <Alert.Heading>{error}</Alert.Heading>\r\n                        <Button onClick={closeAlert} variant=\"outline-primary\">\r\n                            Close Alert!\r\n                        </Button>\r\n                    </Alert>\r\n        </>\r\n    );\r\n}\r\n\r\n","import { ActionsTypes } from '../Store/Store';\r\n\r\n\r\n\r\nconst initialState  = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\nexport const appReducer = (state = initialState , action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-APP-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setAppStatus = (status:RequestStatusType) => {\r\n  return {type: 'APP/SET-APP-STATUS', status} as const\r\n}\r\nexport const setAppError = (error:string | null) => {\r\n    return {type: 'APP/SET-APP-ERROR', error} as const\r\n}\r\n\r\nexport type RequestStatusType = 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = typeof initialState","import axios from 'axios';\r\nimport { AssetsType, DataHistoryAssetsType } from './Types';\r\n\r\nconst createInstance = axios.create({\r\n    baseURL: 'https://api.coincap.io/v2/',\r\n\r\n})\r\n\r\nexport const api = {\r\n    getAssets() {\r\n        return createInstance.get<AssetsType>('assets')\r\n    },\r\n    getDataAssetsPortion(limit: number, offset: number) {\r\n        return createInstance.get<AssetsType>('assets', { params: { limit, offset } })\r\n    },\r\n    getChartAssetData(id:string){\r\n        return createInstance.get<DataHistoryAssetsType>(`assets/${id}/history`, { params: { interval: 'd1' } })\r\n    },\r\n    topAssets(){\r\n        return createInstance.get<AssetsType>('assets?limit=3')\r\n    }\r\n}\r\n\r\n","import { CryptocurrencyListType, DataChartType } from '../Dal/Types';\r\nimport { ActionsTypes, AppDispatchType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\nimport { api } from '../Dal/Api';\r\n\r\nconst initialState = {\r\n    totalAssetData: [] as CryptocurrencyListType[],\r\n    dataAssetsPortion: [] as CryptocurrencyListType[],\r\n    timestamp: null as number | null,\r\n    chartData: [] as DataChartType[],\r\n    topAssets: [] as CryptocurrencyListType[],\r\n\r\n}\r\n\r\n\r\nexport const cryptocurrencyReducer = (state = initialState, action: ActionsTypes): CryptocurrencyInitType => {\r\n    switch (action.type) {\r\n        case 'CRYPT/SET-CURRENT-ASSETS-PORTION':\r\n            return {...state, dataAssetsPortion: action.data}\r\n        case 'CRYPT/SET-DATA-CHART':\r\n            return {...state, chartData: action.data}\r\n        case 'CRYPT/SET-ASSETS-TOTAL':\r\n            return {...state, totalAssetData: action.totalAssetData, timestamp: action.timestamp, topAssets: action.totalAssetData.slice(0,3)}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n//action\r\nexport const setDataAssetsPortion = (data: CryptocurrencyListType[]) => {\r\n    return {type: 'CRYPT/SET-CURRENT-ASSETS-PORTION', data} as const\r\n}\r\nexport const setTotalAssetData = (totalAssetData: CryptocurrencyListType[], timestamp: number) => {\r\n    return {type: 'CRYPT/SET-ASSETS-TOTAL', totalAssetData, timestamp} as const\r\n}\r\nexport const setDataChart = (data: DataChartType[]) => {\r\n    return {type: 'CRYPT/SET-DATA-CHART', data} as const\r\n}\r\n\r\n//thunk\r\nexport const getDataAssetsPortionTC = (limit: number, offset: number) => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.getDataAssetsPortion(limit, offset)\r\n        const {data} = response.data\r\n        dispatch(setDataAssetsPortion(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getDataAssetsTotalTC = () => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.getAssets()\r\n        const {data, timestamp} = response.data\r\n        dispatch(setTotalAssetData(data, timestamp))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\nexport const getChartDataTC = (id: string) => async (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const response = await api.getChartAssetData(id)\r\n        const {data} = response.data\r\n        dispatch(setDataChart(data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (e) {\r\n        dispatch(setAppStatus('failed'))\r\n    }\r\n}\r\n//types\r\nexport type CryptocurrencyInitType = typeof initialState\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../Store/Store';\r\nimport { changeUsersCurrentPage } from '../../../Bll/Portfolio-reducer';\r\nimport { getDataAssetsTotalTC, getDataAssetsPortionTC } from '../../../Bll/Crypt-coin-list-reducer';\r\n\r\ntype UsePaginationType = {\r\n    pageSize: number;\r\n}\r\ntype UsePagination = {\r\n    onPageChange: (page: number) => void;\r\n    totalCount: number;\r\n    pageCurrent: number;\r\n}\r\n\r\nexport const usePagination = ({ pageSize }: UsePaginationType): UsePagination  => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const dataAssetsLength = useSelector<AppStateType, number>((state) => state.cryptocurrencyList.totalAssetData.length)\r\n\r\n\r\n    const pageCurrent = useSelector<AppStateType, number>(state => state.portfolio.currentUserPage)\r\n\r\n    useEffect(() => {\r\n        dispatch(getDataAssetsTotalTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getDataAssetsPortionTC(pageSize, (pageCurrent - 1) * pageSize))\r\n    }, [dispatch, pageCurrent, pageSize])\r\n\r\n\r\n\r\n    const onPageChange = (page: number) => dispatch(changeUsersCurrentPage(page))\r\n\r\n    return {\r\n        onPageChange,\r\n        totalCount: dataAssetsLength,\r\n        pageCurrent\r\n    }\r\n}","import React from 'react';\r\nimport './Paginator.scss'\r\nimport { usePagination } from '../Hooks';\r\n\r\n\r\nexport const Paginator = () => {\r\n    const pageSize = 10\r\n    const { onPageChange, totalCount, pageCurrent} = usePagination({pageSize})\r\n    let pageCount = Math.ceil(totalCount / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div className=\"paginator\">\r\n        {\r\n            pages\r\n                .map(page => {\r\n                    return <span\r\n                        className={pageCurrent === page ? 'paginator-active' : 'paginator-unActive'}\r\n                        key={page}\r\n                        onClick={() => onPageChange(page)}>\r\n                       {page}\r\n                   </span>\r\n                })\r\n        }\r\n\r\n    </div>\r\n};\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Table.scss'\r\nimport { Assets } from './Asset/Assets';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { AlertError } from '../Common/AlertError/AlertError';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { Paginator } from '../Common/Paginator/Paginator';\r\n\r\nexport const Table = () => {\r\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\r\n    const totalAssetData = useSelector<AppStateType, CryptocurrencyListType[]>((state) => state.cryptocurrencyList.dataAssetsPortion)\r\nconst errorReqest = 'The server is overloaded, try again later'\r\n    return <div className=\"main\">\r\n        {status === 'failed' && <AlertError error={errorReqest}/>}\r\n        <div className=\"main__header\">\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Rank</p>\r\n            <p className=\"main__header-text\">Price</p>\r\n        </div>\r\n        {\r\n            status === 'loading' ? <Preloader/>\r\n                :\r\n                totalAssetData.map((asset) => {\r\n                    return <Assets key={asset.id} item={asset}/>\r\n                })\r\n        }\r\n         <Paginator/>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport './Header.scss'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../Dal/Types';\r\nimport { PortfolioInitType } from '../../Bll/Portfolio-reducer';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport { RequestStatusType } from '../../Bll/App-reducer';\r\n\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch()\r\n    const topAssets = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.topAssets)\r\n    const status = useSelector<AppStateType, RequestStatusType>(state =>  state.app.status)\r\n    const {\r\n        portfolio,\r\n        percent,\r\n        currentAssetSessions\r\n    } = useSelector<AppStateType, PortfolioInitType>(state => state.portfolio)\r\n    const portfolioAmount = portfolio && portfolio.reduce((acc, curr) =>\r\n        acc + Number(curr.price), 0).toFixed(2)\r\n\r\n    return <div className=\"header\">\r\n        {status === 'loading' && <Preloader/>}\r\n        {topAssets.map((topAssets) => {\r\n            return  <div className=\"header__assets\" key={topAssets.id}>\r\n                <p className=\"header__assets-text\">{topAssets.name}</p>\r\n                <p className=\"header__assets-text\">${(+topAssets.priceUsd).toFixed(2)}</p>\r\n                </div>\r\n        })}\r\n        <div className=\"header__totalCounts\">\r\n            <p className=\"header__totalCounts-text\">Wallet:{portfolioAmount}USD</p>\r\n            <p className=\"header__totalCounts-text\">Session:{(currentAssetSessions).toFixed(2)}USD</p>\r\n            <p className=\"header__totalCounts-text\">{percent !== Infinity && percent.toFixed(3)}% </p>\r\n        </div>\r\n        <NavLink className=\"header__link\" to={'/portfolio'}> My Portfolio</NavLink>\r\n    </div>\r\n}","import React, { ChangeEvent, useState } from 'react';\r\nimport { Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { removeAssetPortfolio, updateCurrAssetPercent } from '../../../../Bll/Portfolio-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../../Store/Store';\r\nimport { CryptocurrencyListType } from '../../../../Dal/Types';\r\n\r\ntype ChangeWalletType = {\r\n    assetId: string\r\n    count: number\r\n    setChangeAsset: (value: boolean) => void\r\n}\r\nexport const ChangeWallet = React.memo(({assetId, count, setChangeAsset}: ChangeWalletType) => {\r\n    const totalAssetData = useSelector<AppStateType, CryptocurrencyListType[]>(state => state.cryptocurrencyList.totalAssetData)\r\n    const dispatch = useDispatch()\r\n    const [countDelete, setCountDelete] = useState<string>('')\r\n    const removeCountAssets = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > -1) {\r\n            setCountDelete(e.currentTarget.value)\r\n        }\r\n    }\r\n    const removeAssetHandler = (assetId: string) => {\r\n        debugger\r\n        const assetValue = totalAssetData.find((value) => value.id === assetId && value.priceUsd)\r\n        if (assetValue) {\r\n            const assetRemove = {\r\n                assetId: assetId,\r\n                count: Number(countDelete),\r\n                price: Number(assetValue.priceUsd) * Number(countDelete)\r\n            }\r\n            if (count < assetRemove.count) return\r\n            dispatch(updateCurrAssetPercent(assetRemove))\r\n            dispatch(removeAssetPortfolio(assetRemove))\r\n        }\r\n        setChangeAsset(false)\r\n    }\r\n\r\n    return <InputGroup className=\"mb-3\">\r\n        <InputGroup.Text>{assetId}</InputGroup.Text>\r\n        <InputGroup.Text>{count}</InputGroup.Text>\r\n        <FormControl type=\"number\" value={countDelete} onChange={removeCountAssets}/>\r\n        <Button variant=\"primary\" onClick={() => removeAssetHandler(assetId)}>sale</Button>\r\n    </InputGroup>\r\n\r\n\r\n})\r\n\r\n","import { Button } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\nimport './Wallet.scss'\r\nimport { ChangeWallet } from './ChangeWallet/ChangeWallet';\r\nimport { AddAssetType } from '../../../Dal/Types';\r\n\r\n\r\ntype WalletType = {\r\n    asset: AddAssetType\r\n}\r\n\r\nexport const Wallet = React.memo(({asset}: WalletType) => {\r\n    const [changeAsset, setChangeAsset] = useState<boolean>(false)\r\n    const changeAssetHandler = () => setChangeAsset(!changeAsset)\r\n\r\n    return <div className=\"wallet\">\r\n        <Button onClick={changeAssetHandler} variant=\"primary\">Change {asset.assetId}</Button>\r\n        {changeAsset ? <ChangeWallet assetId={asset.assetId} count={asset.count} setChangeAsset={setChangeAsset}/>\r\n            :\r\n            <div className=\"wallet__block\">\r\n                <span>{asset.assetId}</span>\r\n                <span>${(asset.price).toFixed(1)}</span>\r\n                <span>{asset.count}</span>\r\n            </div>\r\n        }\r\n    </div>\r\n})","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { Modal } from 'react-bootstrap';\r\nimport './Portfolio.scss'\r\nimport { Wallet } from './Wallet/Wallet';\r\nimport { AppStateType } from '../../Store/Store';\r\nimport { AddAssetType } from '../../Dal/Types';\r\n\r\n\r\nexport const Portfolio = () => {\r\n    const currentAssets = useSelector<AppStateType, AddAssetType[]>(state => state.portfolio.portfolio)\r\n    const history = useHistory();\r\n    const goBackHandler = () => history.goBack()\r\n    const checkingCurrentAsset = currentAssets.filter(asset => asset.count !== 0)\r\n\r\n    return <Modal show={true}>\r\n        <Modal.Header>\r\n            <Modal.Title>My Portfolio</Modal.Title>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            {!checkingCurrentAsset.length && <div>Your Wallet Is Empty</div>}\r\n            {checkingCurrentAsset.map((asset) => {\r\n                return <Wallet key={asset.assetId} asset={asset}/>\r\n            })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n\r\n        </Modal.Footer>\r\n    </Modal>\r\n}\r\n","import React from 'react';\r\nimport { CryptocurrencyListType } from '../../../../Dal/Types';\r\n\r\n\r\ntype CurrencyDetailsType = {\r\n    asset: CryptocurrencyListType\r\n}\r\n\r\nexport const CurrencyDetails = React.memo( ({asset}:CurrencyDetailsType) => {\r\n\r\n    return <tr key={asset.id}>\r\n        <th>{asset.rank}</th>\r\n        <th>{asset.name}</th>\r\n        <th>${(+asset.priceUsd).toFixed(5)}</th>\r\n        <th>${(+asset.marketCapUsd).toFixed(5)}</th>\r\n        <th>${(+asset.vwap24Hr).toFixed(2)}</th>\r\n        <th>{(+asset.supply).toFixed(5)}B</th>\r\n        <th>{(+asset.volumeUsd24Hr).toFixed(5)}B</th>\r\n        <th>{(+asset.changePercent24Hr).toFixed(2)}%</th>\r\n    </tr>\r\n})","import React from 'react';\r\nimport * as Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport './Chart.scss';\r\nimport { DataChartType } from '../../../Dal/Types';\r\n\r\n\r\nexport type ChartsType = {\r\n    data: DataChartType[]\r\n}\r\n\r\nexport const Charts = ({data}: ChartsType) => {\r\n    const options = {\r\n        series: [{\r\n            type: 'area',\r\n            data: data && data.map(item => +item.priceUsd)\r\n        }]\r\n    }\r\n    return <>\r\n        <HighchartsReact highcharts={Highcharts} options={options}/>\r\n    </>\r\n\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CurrencyDetails } from './CurrenceDetails/CurrencyDetails';\r\nimport './CurrencyInfo.scss'\r\nimport { AppStateType } from '../../../Store/Store';\r\nimport { Charts } from '../../Common/Chart/Chart';\r\nimport { CryptocurrencyInitType, getChartDataTC } from '../../../Bll/Crypt-coin-list-reducer';\r\n\r\n\r\n\r\nexport const CurrencyInfo = () => {\r\n    const {id} = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getChartDataTC(id))\r\n    }, [dispatch, id])\r\n    const {totalAssetData, chartData} = useSelector<AppStateType, CryptocurrencyInitType>(state => state.cryptocurrencyList)\r\n\r\n    const goBackHandler = () => history.goBack()\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={goBackHandler} type=\"button\" className=\"btn btn-outline-primary\">Go back</button>\r\n            <table className=\"table table-hover table-sm\">\r\n                <thead>\r\n                <tr className=\"table-primary\">\r\n                    <th scope=\"col\">Rank</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Market Cap</th>\r\n                    <th scope=\"col\">VWAP(24Hr)</th>\r\n                    <th scope=\"col\">Supply</th>\r\n                    <th scope=\"col\">Volume(24Hr)</th>\r\n                    <th scope=\"col\">Change(24Hr)</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    totalAssetData\r\n                        .filter(asset => asset.id === id)\r\n                        .map((asset) => {\r\n                        return <CurrencyDetails asset={asset} key={asset.id}/>\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n            <Charts data={chartData}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { Table } from './Component/Table/Table';\nimport { Header } from './Component/Header/Header';\nimport { Portfolio } from './Component/Portfolio/Portfolio';\nimport { CurrencyInfo } from './Component/Table/CurrencyInfo/CurrencyInfo';\n\n\nconst App = () => {\n    return (\n        <div className=\"container\">\n            <Header/>\n                <Route>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <Redirect to={'/table'}/>}/>\n                        <Route path={'/portfolio'} render={() => <Portfolio/>}/>\n                        <Route path={'/table'} render={() => <Table/>}/>\n                        <Route path={'/currency-info/:id'} render={() => <CurrencyInfo/>}/>\n                    </Switch>\n                </Route>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { Dispatch } from 'react';\r\nimport ThunkMiddleware, { ThunkAction } from 'redux-thunk'\r\nimport {\r\n    cryptocurrencyReducer,\r\n    setDataAssetsPortion,\r\n    setDataChart,\r\n    setTotalAssetData\r\n} from '../Bll/Crypt-coin-list-reducer';\r\nimport {\r\n    addAsset,\r\n    changeUsersCurrentPage,\r\n    portfolioReducer,\r\n    removeAssetPortfolio,\r\n    setAssets,\r\n    updateCurrAssetPercent\r\n} from '../Bll/Portfolio-reducer';\r\nimport { appReducer, setAppError, setAppStatus } from '../Bll/App-reducer';\r\nimport { loadState, saveState } from '../Component/Common/Utils/localstorage-utils';\r\n\r\nconst rootReducer = combineReducers({\r\n    cryptocurrencyList: cryptocurrencyReducer,\r\n    portfolio: portfolioReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(ThunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        ...store.getState(),\r\n        portfolio: store.getState().portfolio,\r\n    })\r\n})\r\n\r\n//type\r\nexport type ActionsTypes =\r\n    | ReturnType<typeof setDataAssetsPortion>\r\n    | ReturnType<typeof setDataChart>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof addAsset>\r\n    | ReturnType<typeof removeAssetPortfolio>\r\n    | ReturnType<typeof setAssets>\r\n    | ReturnType<typeof updateCurrAssetPercent>\r\n    | ReturnType<typeof changeUsersCurrentPage>\r\n    | ReturnType<typeof changeUsersCurrentPage>\r\n    | ReturnType<typeof setTotalAssetData>\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionsTypes>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionsTypes>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import { AppStateType } from '../../../Store/Store';\r\nimport { AddAssetType } from '../../../Dal/Types';\r\n\r\nconst checkingArrayAssets = (serializedState: string) => {\r\n    const parsedState: AppStateType = JSON.parse(serializedState);\r\n    const portfolio = parsedState.portfolio.portfolio.filter((asset: AddAssetType) => asset.count !== 0)\r\n    return {...parsedState, portfolio: {...parsedState.portfolio, portfolio: portfolio, percent: 0, currentAssetSessions: 0 }}\r\n}\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('portfolioAssets');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n\r\n        return checkingArrayAssets(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('portfolioAssets', serializedState);\r\n    } catch (error) {\r\n        return undefined\r\n    }\r\n};\r\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './Store/Store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <HashRouter>\n     <Provider store={store}>\n         <App />\n     </Provider>\n   </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}